
Problem_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029d8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002b60  08002b60  00012b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b78  08002b78  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002b78  08002b78  00012b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002b80  08002b80  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b80  08002b80  00012b80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b84  08002b84  00012b84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002b88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000128  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000134  20000134  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000793d  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001846  00000000  00000000  000279bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000788  00000000  00000000  00029208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000005a6  00000000  00000000  00029990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002084e  00000000  00000000  00029f36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000091a0  00000000  00000000  0004a784  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000caa42  00000000  00000000  00053924  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001dd4  00000000  00000000  0011e368  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000055  00000000  00000000  0012013c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002b48 	.word	0x08002b48

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002b48 	.word	0x08002b48

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <EXTI0_IRQHandler>:
#define     Threshold_3    48000



void EXTI0_IRQHandler(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA (&hadc1, &buffer, 1);
 80004c8:	2201      	movs	r2, #1
 80004ca:	4904      	ldr	r1, [pc, #16]	; (80004dc <EXTI0_IRQHandler+0x18>)
 80004cc:	4804      	ldr	r0, [pc, #16]	; (80004e0 <EXTI0_IRQHandler+0x1c>)
 80004ce:	f000 fc25 	bl	8000d1c <HAL_ADC_Start_DMA>
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_0);
 80004d2:	4b04      	ldr	r3, [pc, #16]	; (80004e4 <EXTI0_IRQHandler+0x20>)
 80004d4:	2201      	movs	r2, #1
 80004d6:	615a      	str	r2, [r3, #20]

}
 80004d8:	bf00      	nop
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	20000128 	.word	0x20000128
 80004e0:	20000028 	.word	0x20000028
 80004e4:	40013c00 	.word	0x40013c00

080004e8 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]

	adc_val = buffer*16;
 80004f0:	4b27      	ldr	r3, [pc, #156]	; (8000590 <HAL_ADC_ConvCpltCallback+0xa8>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	011b      	lsls	r3, r3, #4
 80004f6:	4a27      	ldr	r2, [pc, #156]	; (8000594 <HAL_ADC_ConvCpltCallback+0xac>)
 80004f8:	6013      	str	r3, [r2, #0]

	HAL_ADC_Stop(&hadc1);
 80004fa:	4827      	ldr	r0, [pc, #156]	; (8000598 <HAL_ADC_ConvCpltCallback+0xb0>)
 80004fc:	f000 fbdb 	bl	8000cb6 <HAL_ADC_Stop>
    if(adc_val<Threshold_1)
 8000500:	4b24      	ldr	r3, [pc, #144]	; (8000594 <HAL_ADC_ConvCpltCallback+0xac>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8000508:	d20c      	bcs.n	8000524 <HAL_ADC_ConvCpltCallback+0x3c>
    	 {HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800050a:	2200      	movs	r2, #0
 800050c:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000510:	4822      	ldr	r0, [pc, #136]	; (800059c <HAL_ADC_ConvCpltCallback+0xb4>)
 8000512:	f001 fde5 	bl	80020e0 <HAL_GPIO_WritePin>
         HAL_GPIO_WritePin(GPIOD,GPIO_PIN_12, GPIO_PIN_SET);}
 8000516:	2201      	movs	r2, #1
 8000518:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800051c:	481f      	ldr	r0, [pc, #124]	; (800059c <HAL_ADC_ConvCpltCallback+0xb4>)
 800051e:	f001 fddf 	bl	80020e0 <HAL_GPIO_WritePin>
    else
    {HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
            HAL_GPIO_WritePin(GPIOD,GPIO_PIN_15, GPIO_PIN_SET);}


}
 8000522:	e030      	b.n	8000586 <HAL_ADC_ConvCpltCallback+0x9e>
    else if(adc_val<Threshold_2)
 8000524:	4b1b      	ldr	r3, [pc, #108]	; (8000594 <HAL_ADC_ConvCpltCallback+0xac>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 800052c:	d20c      	bcs.n	8000548 <HAL_ADC_ConvCpltCallback+0x60>
	 {HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800052e:	2200      	movs	r2, #0
 8000530:	f44f 4150 	mov.w	r1, #53248	; 0xd000
 8000534:	4819      	ldr	r0, [pc, #100]	; (800059c <HAL_ADC_ConvCpltCallback+0xb4>)
 8000536:	f001 fdd3 	bl	80020e0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD,GPIO_PIN_13, GPIO_PIN_SET);}
 800053a:	2201      	movs	r2, #1
 800053c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000540:	4816      	ldr	r0, [pc, #88]	; (800059c <HAL_ADC_ConvCpltCallback+0xb4>)
 8000542:	f001 fdcd 	bl	80020e0 <HAL_GPIO_WritePin>
}
 8000546:	e01e      	b.n	8000586 <HAL_ADC_ConvCpltCallback+0x9e>
    else if(adc_val<Threshold_3)
 8000548:	4b12      	ldr	r3, [pc, #72]	; (8000594 <HAL_ADC_ConvCpltCallback+0xac>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8000550:	4293      	cmp	r3, r2
 8000552:	d80c      	bhi.n	800056e <HAL_ADC_ConvCpltCallback+0x86>
    	 {HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15, GPIO_PIN_RESET);
 8000554:	2200      	movs	r2, #0
 8000556:	f44f 4130 	mov.w	r1, #45056	; 0xb000
 800055a:	4810      	ldr	r0, [pc, #64]	; (800059c <HAL_ADC_ConvCpltCallback+0xb4>)
 800055c:	f001 fdc0 	bl	80020e0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOD,GPIO_PIN_14, GPIO_PIN_SET);}
 8000560:	2201      	movs	r2, #1
 8000562:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000566:	480d      	ldr	r0, [pc, #52]	; (800059c <HAL_ADC_ConvCpltCallback+0xb4>)
 8000568:	f001 fdba 	bl	80020e0 <HAL_GPIO_WritePin>
}
 800056c:	e00b      	b.n	8000586 <HAL_ADC_ConvCpltCallback+0x9e>
    {HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 800056e:	2200      	movs	r2, #0
 8000570:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8000574:	4809      	ldr	r0, [pc, #36]	; (800059c <HAL_ADC_ConvCpltCallback+0xb4>)
 8000576:	f001 fdb3 	bl	80020e0 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOD,GPIO_PIN_15, GPIO_PIN_SET);}
 800057a:	2201      	movs	r2, #1
 800057c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000580:	4806      	ldr	r0, [pc, #24]	; (800059c <HAL_ADC_ConvCpltCallback+0xb4>)
 8000582:	f001 fdad 	bl	80020e0 <HAL_GPIO_WritePin>
}
 8000586:	bf00      	nop
 8000588:	3708      	adds	r7, #8
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	20000128 	.word	0x20000128
 8000594:	2000012c 	.word	0x2000012c
 8000598:	20000028 	.word	0x20000028
 800059c:	40020c00 	.word	0x40020c00

080005a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a4:	f000 fad2 	bl	8000b4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a8:	f000 f80a 	bl	80005c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ac:	f000 f916 	bl	80007dc <MX_GPIO_Init>
  MX_DMA_Init();
 80005b0:	f000 f8f4 	bl	800079c <MX_DMA_Init>
  MX_ADC1_Init();
 80005b4:	f000 f86e 	bl	8000694 <MX_ADC1_Init>
  MX_SPI1_Init();
 80005b8:	f000 f8be 	bl	8000738 <MX_SPI1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005bc:	e7fe      	b.n	80005bc <main+0x1c>
	...

080005c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b094      	sub	sp, #80	; 0x50
 80005c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c6:	f107 0320 	add.w	r3, r7, #32
 80005ca:	2230      	movs	r2, #48	; 0x30
 80005cc:	2100      	movs	r1, #0
 80005ce:	4618      	mov	r0, r3
 80005d0:	f002 fa8d 	bl	8002aee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d4:	f107 030c 	add.w	r3, r7, #12
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	605a      	str	r2, [r3, #4]
 80005de:	609a      	str	r2, [r3, #8]
 80005e0:	60da      	str	r2, [r3, #12]
 80005e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e4:	2300      	movs	r3, #0
 80005e6:	60bb      	str	r3, [r7, #8]
 80005e8:	4b28      	ldr	r3, [pc, #160]	; (800068c <SystemClock_Config+0xcc>)
 80005ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ec:	4a27      	ldr	r2, [pc, #156]	; (800068c <SystemClock_Config+0xcc>)
 80005ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005f2:	6413      	str	r3, [r2, #64]	; 0x40
 80005f4:	4b25      	ldr	r3, [pc, #148]	; (800068c <SystemClock_Config+0xcc>)
 80005f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005fc:	60bb      	str	r3, [r7, #8]
 80005fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000600:	2300      	movs	r3, #0
 8000602:	607b      	str	r3, [r7, #4]
 8000604:	4b22      	ldr	r3, [pc, #136]	; (8000690 <SystemClock_Config+0xd0>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a21      	ldr	r2, [pc, #132]	; (8000690 <SystemClock_Config+0xd0>)
 800060a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800060e:	6013      	str	r3, [r2, #0]
 8000610:	4b1f      	ldr	r3, [pc, #124]	; (8000690 <SystemClock_Config+0xd0>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000618:	607b      	str	r3, [r7, #4]
 800061a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800061c:	2302      	movs	r3, #2
 800061e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000620:	2301      	movs	r3, #1
 8000622:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000624:	2310      	movs	r3, #16
 8000626:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000628:	2302      	movs	r3, #2
 800062a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800062c:	2300      	movs	r3, #0
 800062e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 14;
 8000630:	230e      	movs	r3, #14
 8000632:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 344;
 8000634:	f44f 73ac 	mov.w	r3, #344	; 0x158
 8000638:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 800063a:	2306      	movs	r3, #6
 800063c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800063e:	2307      	movs	r3, #7
 8000640:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000642:	f107 0320 	add.w	r3, r7, #32
 8000646:	4618      	mov	r0, r3
 8000648:	f001 fd64 	bl	8002114 <HAL_RCC_OscConfig>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000652:	f000 f91f 	bl	8000894 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000656:	230f      	movs	r3, #15
 8000658:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800065a:	2302      	movs	r3, #2
 800065c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800065e:	2300      	movs	r3, #0
 8000660:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000662:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000666:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000668:	2300      	movs	r3, #0
 800066a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800066c:	f107 030c 	add.w	r3, r7, #12
 8000670:	2102      	movs	r1, #2
 8000672:	4618      	mov	r0, r3
 8000674:	f001 ffc6 	bl	8002604 <HAL_RCC_ClockConfig>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800067e:	f000 f909 	bl	8000894 <Error_Handler>
  }
}
 8000682:	bf00      	nop
 8000684:	3750      	adds	r7, #80	; 0x50
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	40023800 	.word	0x40023800
 8000690:	40007000 	.word	0x40007000

08000694 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b084      	sub	sp, #16
 8000698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800069a:	463b      	mov	r3, r7
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]
 80006a4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006a6:	4b21      	ldr	r3, [pc, #132]	; (800072c <MX_ADC1_Init+0x98>)
 80006a8:	4a21      	ldr	r2, [pc, #132]	; (8000730 <MX_ADC1_Init+0x9c>)
 80006aa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80006ac:	4b1f      	ldr	r3, [pc, #124]	; (800072c <MX_ADC1_Init+0x98>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006b2:	4b1e      	ldr	r3, [pc, #120]	; (800072c <MX_ADC1_Init+0x98>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80006b8:	4b1c      	ldr	r3, [pc, #112]	; (800072c <MX_ADC1_Init+0x98>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006be:	4b1b      	ldr	r3, [pc, #108]	; (800072c <MX_ADC1_Init+0x98>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006c4:	4b19      	ldr	r3, [pc, #100]	; (800072c <MX_ADC1_Init+0x98>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006cc:	4b17      	ldr	r3, [pc, #92]	; (800072c <MX_ADC1_Init+0x98>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006d2:	4b16      	ldr	r3, [pc, #88]	; (800072c <MX_ADC1_Init+0x98>)
 80006d4:	4a17      	ldr	r2, [pc, #92]	; (8000734 <MX_ADC1_Init+0xa0>)
 80006d6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006d8:	4b14      	ldr	r3, [pc, #80]	; (800072c <MX_ADC1_Init+0x98>)
 80006da:	2200      	movs	r2, #0
 80006dc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80006de:	4b13      	ldr	r3, [pc, #76]	; (800072c <MX_ADC1_Init+0x98>)
 80006e0:	2201      	movs	r2, #1
 80006e2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80006e4:	4b11      	ldr	r3, [pc, #68]	; (800072c <MX_ADC1_Init+0x98>)
 80006e6:	2201      	movs	r2, #1
 80006e8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006ec:	4b0f      	ldr	r3, [pc, #60]	; (800072c <MX_ADC1_Init+0x98>)
 80006ee:	2201      	movs	r2, #1
 80006f0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006f2:	480e      	ldr	r0, [pc, #56]	; (800072c <MX_ADC1_Init+0x98>)
 80006f4:	f000 fa9c 	bl	8000c30 <HAL_ADC_Init>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80006fe:	f000 f8c9 	bl	8000894 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000702:	2301      	movs	r3, #1
 8000704:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000706:	2301      	movs	r3, #1
 8000708:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800070a:	2300      	movs	r3, #0
 800070c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800070e:	463b      	mov	r3, r7
 8000710:	4619      	mov	r1, r3
 8000712:	4806      	ldr	r0, [pc, #24]	; (800072c <MX_ADC1_Init+0x98>)
 8000714:	f000 fc26 	bl	8000f64 <HAL_ADC_ConfigChannel>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800071e:	f000 f8b9 	bl	8000894 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000722:	bf00      	nop
 8000724:	3710      	adds	r7, #16
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	20000028 	.word	0x20000028
 8000730:	40012000 	.word	0x40012000
 8000734:	0f000001 	.word	0x0f000001

08000738 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800073c:	4b15      	ldr	r3, [pc, #84]	; (8000794 <MX_SPI1_Init+0x5c>)
 800073e:	4a16      	ldr	r2, [pc, #88]	; (8000798 <MX_SPI1_Init+0x60>)
 8000740:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000742:	4b14      	ldr	r3, [pc, #80]	; (8000794 <MX_SPI1_Init+0x5c>)
 8000744:	2200      	movs	r2, #0
 8000746:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000748:	4b12      	ldr	r3, [pc, #72]	; (8000794 <MX_SPI1_Init+0x5c>)
 800074a:	2200      	movs	r2, #0
 800074c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800074e:	4b11      	ldr	r3, [pc, #68]	; (8000794 <MX_SPI1_Init+0x5c>)
 8000750:	2200      	movs	r2, #0
 8000752:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000754:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <MX_SPI1_Init+0x5c>)
 8000756:	2200      	movs	r2, #0
 8000758:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800075a:	4b0e      	ldr	r3, [pc, #56]	; (8000794 <MX_SPI1_Init+0x5c>)
 800075c:	2200      	movs	r2, #0
 800075e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000760:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <MX_SPI1_Init+0x5c>)
 8000762:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000766:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000768:	4b0a      	ldr	r3, [pc, #40]	; (8000794 <MX_SPI1_Init+0x5c>)
 800076a:	2200      	movs	r2, #0
 800076c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800076e:	4b09      	ldr	r3, [pc, #36]	; (8000794 <MX_SPI1_Init+0x5c>)
 8000770:	2200      	movs	r2, #0
 8000772:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000774:	4b07      	ldr	r3, [pc, #28]	; (8000794 <MX_SPI1_Init+0x5c>)
 8000776:	2200      	movs	r2, #0
 8000778:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800077a:	4b06      	ldr	r3, [pc, #24]	; (8000794 <MX_SPI1_Init+0x5c>)
 800077c:	220a      	movs	r2, #10
 800077e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000780:	4804      	ldr	r0, [pc, #16]	; (8000794 <MX_SPI1_Init+0x5c>)
 8000782:	f002 f92b 	bl	80029dc <HAL_SPI_Init>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_SPI1_Init+0x58>
  {
    Error_Handler();
 800078c:	f000 f882 	bl	8000894 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000790:	bf00      	nop
 8000792:	bd80      	pop	{r7, pc}
 8000794:	200000d0 	.word	0x200000d0
 8000798:	40013000 	.word	0x40013000

0800079c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	607b      	str	r3, [r7, #4]
 80007a6:	4b0c      	ldr	r3, [pc, #48]	; (80007d8 <MX_DMA_Init+0x3c>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4a0b      	ldr	r2, [pc, #44]	; (80007d8 <MX_DMA_Init+0x3c>)
 80007ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <MX_DMA_Init+0x3c>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80007be:	2200      	movs	r2, #0
 80007c0:	2100      	movs	r1, #0
 80007c2:	2038      	movs	r0, #56	; 0x38
 80007c4:	f000 ff49 	bl	800165a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80007c8:	2038      	movs	r0, #56	; 0x38
 80007ca:	f000 ff62 	bl	8001692 <HAL_NVIC_EnableIRQ>

}
 80007ce:	bf00      	nop
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	40023800 	.word	0x40023800

080007dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b088      	sub	sp, #32
 80007e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e2:	f107 030c 	add.w	r3, r7, #12
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	605a      	str	r2, [r3, #4]
 80007ec:	609a      	str	r2, [r3, #8]
 80007ee:	60da      	str	r2, [r3, #12]
 80007f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	60bb      	str	r3, [r7, #8]
 80007f6:	4b24      	ldr	r3, [pc, #144]	; (8000888 <MX_GPIO_Init+0xac>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a23      	ldr	r2, [pc, #140]	; (8000888 <MX_GPIO_Init+0xac>)
 80007fc:	f043 0301 	orr.w	r3, r3, #1
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b21      	ldr	r3, [pc, #132]	; (8000888 <MX_GPIO_Init+0xac>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	60bb      	str	r3, [r7, #8]
 800080c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	607b      	str	r3, [r7, #4]
 8000812:	4b1d      	ldr	r3, [pc, #116]	; (8000888 <MX_GPIO_Init+0xac>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a1c      	ldr	r2, [pc, #112]	; (8000888 <MX_GPIO_Init+0xac>)
 8000818:	f043 0308 	orr.w	r3, r3, #8
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b1a      	ldr	r3, [pc, #104]	; (8000888 <MX_GPIO_Init+0xac>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0308 	and.w	r3, r3, #8
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800082a:	2200      	movs	r2, #0
 800082c:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000830:	4816      	ldr	r0, [pc, #88]	; (800088c <MX_GPIO_Init+0xb0>)
 8000832:	f001 fc55 	bl	80020e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000836:	2301      	movs	r3, #1
 8000838:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800083a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800083e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000840:	2302      	movs	r3, #2
 8000842:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000844:	f107 030c 	add.w	r3, r7, #12
 8000848:	4619      	mov	r1, r3
 800084a:	4811      	ldr	r0, [pc, #68]	; (8000890 <MX_GPIO_Init+0xb4>)
 800084c:	f001 faac 	bl	8001da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000850:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000854:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000856:	2301      	movs	r3, #1
 8000858:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085e:	2300      	movs	r3, #0
 8000860:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000862:	f107 030c 	add.w	r3, r7, #12
 8000866:	4619      	mov	r1, r3
 8000868:	4808      	ldr	r0, [pc, #32]	; (800088c <MX_GPIO_Init+0xb0>)
 800086a:	f001 fa9d 	bl	8001da8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800086e:	2200      	movs	r2, #0
 8000870:	2100      	movs	r1, #0
 8000872:	2006      	movs	r0, #6
 8000874:	f000 fef1 	bl	800165a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000878:	2006      	movs	r0, #6
 800087a:	f000 ff0a 	bl	8001692 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800087e:	bf00      	nop
 8000880:	3720      	adds	r7, #32
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	40023800 	.word	0x40023800
 800088c:	40020c00 	.word	0x40020c00
 8000890:	40020000 	.word	0x40020000

08000894 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000898:	b672      	cpsid	i
}
 800089a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800089c:	e7fe      	b.n	800089c <Error_Handler+0x8>
	...

080008a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	607b      	str	r3, [r7, #4]
 80008aa:	4b10      	ldr	r3, [pc, #64]	; (80008ec <HAL_MspInit+0x4c>)
 80008ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ae:	4a0f      	ldr	r2, [pc, #60]	; (80008ec <HAL_MspInit+0x4c>)
 80008b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008b4:	6453      	str	r3, [r2, #68]	; 0x44
 80008b6:	4b0d      	ldr	r3, [pc, #52]	; (80008ec <HAL_MspInit+0x4c>)
 80008b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008be:	607b      	str	r3, [r7, #4]
 80008c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	603b      	str	r3, [r7, #0]
 80008c6:	4b09      	ldr	r3, [pc, #36]	; (80008ec <HAL_MspInit+0x4c>)
 80008c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ca:	4a08      	ldr	r2, [pc, #32]	; (80008ec <HAL_MspInit+0x4c>)
 80008cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008d0:	6413      	str	r3, [r2, #64]	; 0x40
 80008d2:	4b06      	ldr	r3, [pc, #24]	; (80008ec <HAL_MspInit+0x4c>)
 80008d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008da:	603b      	str	r3, [r7, #0]
 80008dc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80008de:	2007      	movs	r0, #7
 80008e0:	f000 feb0 	bl	8001644 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008e4:	bf00      	nop
 80008e6:	3708      	adds	r7, #8
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	40023800 	.word	0x40023800

080008f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b08a      	sub	sp, #40	; 0x28
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f8:	f107 0314 	add.w	r3, r7, #20
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	605a      	str	r2, [r3, #4]
 8000902:	609a      	str	r2, [r3, #8]
 8000904:	60da      	str	r2, [r3, #12]
 8000906:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a2e      	ldr	r2, [pc, #184]	; (80009c8 <HAL_ADC_MspInit+0xd8>)
 800090e:	4293      	cmp	r3, r2
 8000910:	d156      	bne.n	80009c0 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	613b      	str	r3, [r7, #16]
 8000916:	4b2d      	ldr	r3, [pc, #180]	; (80009cc <HAL_ADC_MspInit+0xdc>)
 8000918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800091a:	4a2c      	ldr	r2, [pc, #176]	; (80009cc <HAL_ADC_MspInit+0xdc>)
 800091c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000920:	6453      	str	r3, [r2, #68]	; 0x44
 8000922:	4b2a      	ldr	r3, [pc, #168]	; (80009cc <HAL_ADC_MspInit+0xdc>)
 8000924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800092a:	613b      	str	r3, [r7, #16]
 800092c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	60fb      	str	r3, [r7, #12]
 8000932:	4b26      	ldr	r3, [pc, #152]	; (80009cc <HAL_ADC_MspInit+0xdc>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	4a25      	ldr	r2, [pc, #148]	; (80009cc <HAL_ADC_MspInit+0xdc>)
 8000938:	f043 0301 	orr.w	r3, r3, #1
 800093c:	6313      	str	r3, [r2, #48]	; 0x30
 800093e:	4b23      	ldr	r3, [pc, #140]	; (80009cc <HAL_ADC_MspInit+0xdc>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	f003 0301 	and.w	r3, r3, #1
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800094a:	2302      	movs	r3, #2
 800094c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800094e:	2303      	movs	r3, #3
 8000950:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	2300      	movs	r3, #0
 8000954:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000956:	f107 0314 	add.w	r3, r7, #20
 800095a:	4619      	mov	r1, r3
 800095c:	481c      	ldr	r0, [pc, #112]	; (80009d0 <HAL_ADC_MspInit+0xe0>)
 800095e:	f001 fa23 	bl	8001da8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000962:	4b1c      	ldr	r3, [pc, #112]	; (80009d4 <HAL_ADC_MspInit+0xe4>)
 8000964:	4a1c      	ldr	r2, [pc, #112]	; (80009d8 <HAL_ADC_MspInit+0xe8>)
 8000966:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000968:	4b1a      	ldr	r3, [pc, #104]	; (80009d4 <HAL_ADC_MspInit+0xe4>)
 800096a:	2200      	movs	r2, #0
 800096c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800096e:	4b19      	ldr	r3, [pc, #100]	; (80009d4 <HAL_ADC_MspInit+0xe4>)
 8000970:	2200      	movs	r2, #0
 8000972:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000974:	4b17      	ldr	r3, [pc, #92]	; (80009d4 <HAL_ADC_MspInit+0xe4>)
 8000976:	2200      	movs	r2, #0
 8000978:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800097a:	4b16      	ldr	r3, [pc, #88]	; (80009d4 <HAL_ADC_MspInit+0xe4>)
 800097c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000980:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000982:	4b14      	ldr	r3, [pc, #80]	; (80009d4 <HAL_ADC_MspInit+0xe4>)
 8000984:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000988:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800098a:	4b12      	ldr	r3, [pc, #72]	; (80009d4 <HAL_ADC_MspInit+0xe4>)
 800098c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000990:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000992:	4b10      	ldr	r3, [pc, #64]	; (80009d4 <HAL_ADC_MspInit+0xe4>)
 8000994:	2200      	movs	r2, #0
 8000996:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000998:	4b0e      	ldr	r3, [pc, #56]	; (80009d4 <HAL_ADC_MspInit+0xe4>)
 800099a:	2200      	movs	r2, #0
 800099c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800099e:	4b0d      	ldr	r3, [pc, #52]	; (80009d4 <HAL_ADC_MspInit+0xe4>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80009a4:	480b      	ldr	r0, [pc, #44]	; (80009d4 <HAL_ADC_MspInit+0xe4>)
 80009a6:	f000 fe8f 	bl	80016c8 <HAL_DMA_Init>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 80009b0:	f7ff ff70 	bl	8000894 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	4a07      	ldr	r2, [pc, #28]	; (80009d4 <HAL_ADC_MspInit+0xe4>)
 80009b8:	639a      	str	r2, [r3, #56]	; 0x38
 80009ba:	4a06      	ldr	r2, [pc, #24]	; (80009d4 <HAL_ADC_MspInit+0xe4>)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80009c0:	bf00      	nop
 80009c2:	3728      	adds	r7, #40	; 0x28
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	40012000 	.word	0x40012000
 80009cc:	40023800 	.word	0x40023800
 80009d0:	40020000 	.word	0x40020000
 80009d4:	20000070 	.word	0x20000070
 80009d8:	40026410 	.word	0x40026410

080009dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b08a      	sub	sp, #40	; 0x28
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e4:	f107 0314 	add.w	r3, r7, #20
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	605a      	str	r2, [r3, #4]
 80009ee:	609a      	str	r2, [r3, #8]
 80009f0:	60da      	str	r2, [r3, #12]
 80009f2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a19      	ldr	r2, [pc, #100]	; (8000a60 <HAL_SPI_MspInit+0x84>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d12b      	bne.n	8000a56 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	613b      	str	r3, [r7, #16]
 8000a02:	4b18      	ldr	r3, [pc, #96]	; (8000a64 <HAL_SPI_MspInit+0x88>)
 8000a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a06:	4a17      	ldr	r2, [pc, #92]	; (8000a64 <HAL_SPI_MspInit+0x88>)
 8000a08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a0e:	4b15      	ldr	r3, [pc, #84]	; (8000a64 <HAL_SPI_MspInit+0x88>)
 8000a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a16:	613b      	str	r3, [r7, #16]
 8000a18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	60fb      	str	r3, [r7, #12]
 8000a1e:	4b11      	ldr	r3, [pc, #68]	; (8000a64 <HAL_SPI_MspInit+0x88>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	4a10      	ldr	r2, [pc, #64]	; (8000a64 <HAL_SPI_MspInit+0x88>)
 8000a24:	f043 0301 	orr.w	r3, r3, #1
 8000a28:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2a:	4b0e      	ldr	r3, [pc, #56]	; (8000a64 <HAL_SPI_MspInit+0x88>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	f003 0301 	and.w	r3, r3, #1
 8000a32:	60fb      	str	r3, [r7, #12]
 8000a34:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000a36:	23e0      	movs	r3, #224	; 0xe0
 8000a38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a42:	2303      	movs	r3, #3
 8000a44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a46:	2305      	movs	r3, #5
 8000a48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4a:	f107 0314 	add.w	r3, r7, #20
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4805      	ldr	r0, [pc, #20]	; (8000a68 <HAL_SPI_MspInit+0x8c>)
 8000a52:	f001 f9a9 	bl	8001da8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000a56:	bf00      	nop
 8000a58:	3728      	adds	r7, #40	; 0x28
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40013000 	.word	0x40013000
 8000a64:	40023800 	.word	0x40023800
 8000a68:	40020000 	.word	0x40020000

08000a6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a70:	e7fe      	b.n	8000a70 <NMI_Handler+0x4>

08000a72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a72:	b480      	push	{r7}
 8000a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a76:	e7fe      	b.n	8000a76 <HardFault_Handler+0x4>

08000a78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a7c:	e7fe      	b.n	8000a7c <MemManage_Handler+0x4>

08000a7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a82:	e7fe      	b.n	8000a82 <BusFault_Handler+0x4>

08000a84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a88:	e7fe      	b.n	8000a88 <UsageFault_Handler+0x4>

08000a8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr

08000a98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a9c:	bf00      	nop
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr

08000aa6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr

08000ab4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ab8:	f000 f89a 	bl	8000bf0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000abc:	bf00      	nop
 8000abe:	bd80      	pop	{r7, pc}

08000ac0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000ac4:	4802      	ldr	r0, [pc, #8]	; (8000ad0 <DMA2_Stream0_IRQHandler+0x10>)
 8000ac6:	f000 ff05 	bl	80018d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000aca:	bf00      	nop
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	20000070 	.word	0x20000070

08000ad4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ad8:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <SystemInit+0x20>)
 8000ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ade:	4a05      	ldr	r2, [pc, #20]	; (8000af4 <SystemInit+0x20>)
 8000ae0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ae4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	e000ed00 	.word	0xe000ed00

08000af8 <Reset_Handler>:
 8000af8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b30 <LoopFillZerobss+0x12>
 8000afc:	480d      	ldr	r0, [pc, #52]	; (8000b34 <LoopFillZerobss+0x16>)
 8000afe:	490e      	ldr	r1, [pc, #56]	; (8000b38 <LoopFillZerobss+0x1a>)
 8000b00:	4a0e      	ldr	r2, [pc, #56]	; (8000b3c <LoopFillZerobss+0x1e>)
 8000b02:	2300      	movs	r3, #0
 8000b04:	e002      	b.n	8000b0c <LoopCopyDataInit>

08000b06 <CopyDataInit>:
 8000b06:	58d4      	ldr	r4, [r2, r3]
 8000b08:	50c4      	str	r4, [r0, r3]
 8000b0a:	3304      	adds	r3, #4

08000b0c <LoopCopyDataInit>:
 8000b0c:	18c4      	adds	r4, r0, r3
 8000b0e:	428c      	cmp	r4, r1
 8000b10:	d3f9      	bcc.n	8000b06 <CopyDataInit>
 8000b12:	4a0b      	ldr	r2, [pc, #44]	; (8000b40 <LoopFillZerobss+0x22>)
 8000b14:	4c0b      	ldr	r4, [pc, #44]	; (8000b44 <LoopFillZerobss+0x26>)
 8000b16:	2300      	movs	r3, #0
 8000b18:	e001      	b.n	8000b1e <LoopFillZerobss>

08000b1a <FillZerobss>:
 8000b1a:	6013      	str	r3, [r2, #0]
 8000b1c:	3204      	adds	r2, #4

08000b1e <LoopFillZerobss>:
 8000b1e:	42a2      	cmp	r2, r4
 8000b20:	d3fb      	bcc.n	8000b1a <FillZerobss>
 8000b22:	f7ff ffd7 	bl	8000ad4 <SystemInit>
 8000b26:	f001 ffeb 	bl	8002b00 <__libc_init_array>
 8000b2a:	f7ff fd39 	bl	80005a0 <main>
 8000b2e:	4770      	bx	lr
 8000b30:	20020000 	.word	0x20020000
 8000b34:	20000000 	.word	0x20000000
 8000b38:	2000000c 	.word	0x2000000c
 8000b3c:	08002b88 	.word	0x08002b88
 8000b40:	2000000c 	.word	0x2000000c
 8000b44:	20000134 	.word	0x20000134

08000b48 <ADC_IRQHandler>:
 8000b48:	e7fe      	b.n	8000b48 <ADC_IRQHandler>
	...

08000b4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b50:	4b0e      	ldr	r3, [pc, #56]	; (8000b8c <HAL_Init+0x40>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a0d      	ldr	r2, [pc, #52]	; (8000b8c <HAL_Init+0x40>)
 8000b56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b5c:	4b0b      	ldr	r3, [pc, #44]	; (8000b8c <HAL_Init+0x40>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a0a      	ldr	r2, [pc, #40]	; (8000b8c <HAL_Init+0x40>)
 8000b62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b68:	4b08      	ldr	r3, [pc, #32]	; (8000b8c <HAL_Init+0x40>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a07      	ldr	r2, [pc, #28]	; (8000b8c <HAL_Init+0x40>)
 8000b6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b74:	2003      	movs	r0, #3
 8000b76:	f000 fd65 	bl	8001644 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b7a:	2000      	movs	r0, #0
 8000b7c:	f000 f808 	bl	8000b90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b80:	f7ff fe8e 	bl	80008a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b84:	2300      	movs	r3, #0
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40023c00 	.word	0x40023c00

08000b90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b98:	4b12      	ldr	r3, [pc, #72]	; (8000be4 <HAL_InitTick+0x54>)
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	4b12      	ldr	r3, [pc, #72]	; (8000be8 <HAL_InitTick+0x58>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ba6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f000 fd7d 	bl	80016ae <HAL_SYSTICK_Config>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	e00e      	b.n	8000bdc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2b0f      	cmp	r3, #15
 8000bc2:	d80a      	bhi.n	8000bda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	6879      	ldr	r1, [r7, #4]
 8000bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bcc:	f000 fd45 	bl	800165a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bd0:	4a06      	ldr	r2, [pc, #24]	; (8000bec <HAL_InitTick+0x5c>)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	e000      	b.n	8000bdc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bda:	2301      	movs	r3, #1
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	20000000 	.word	0x20000000
 8000be8:	20000008 	.word	0x20000008
 8000bec:	20000004 	.word	0x20000004

08000bf0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bf4:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <HAL_IncTick+0x20>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <HAL_IncTick+0x24>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4413      	add	r3, r2
 8000c00:	4a04      	ldr	r2, [pc, #16]	; (8000c14 <HAL_IncTick+0x24>)
 8000c02:	6013      	str	r3, [r2, #0]
}
 8000c04:	bf00      	nop
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	20000008 	.word	0x20000008
 8000c14:	20000130 	.word	0x20000130

08000c18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c1c:	4b03      	ldr	r3, [pc, #12]	; (8000c2c <HAL_GetTick+0x14>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	20000130 	.word	0x20000130

08000c30 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d101      	bne.n	8000c46 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000c42:	2301      	movs	r3, #1
 8000c44:	e033      	b.n	8000cae <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d109      	bne.n	8000c62 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c4e:	6878      	ldr	r0, [r7, #4]
 8000c50:	f7ff fe4e 	bl	80008f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	2200      	movs	r2, #0
 8000c58:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c66:	f003 0310 	and.w	r3, r3, #16
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d118      	bne.n	8000ca0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c72:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000c76:	f023 0302 	bic.w	r3, r3, #2
 8000c7a:	f043 0202 	orr.w	r2, r3, #2
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000c82:	6878      	ldr	r0, [r7, #4]
 8000c84:	f000 fa90 	bl	80011a8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c92:	f023 0303 	bic.w	r3, r3, #3
 8000c96:	f043 0201 	orr.w	r2, r3, #1
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	641a      	str	r2, [r3, #64]	; 0x40
 8000c9e:	e001      	b.n	8000ca4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3710      	adds	r7, #16
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	b083      	sub	sp, #12
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000cc4:	2b01      	cmp	r3, #1
 8000cc6:	d101      	bne.n	8000ccc <HAL_ADC_Stop+0x16>
 8000cc8:	2302      	movs	r3, #2
 8000cca:	e021      	b.n	8000d10 <HAL_ADC_Stop+0x5a>
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2201      	movs	r2, #1
 8000cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	689a      	ldr	r2, [r3, #8]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f022 0201 	bic.w	r2, r2, #1
 8000ce2:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	689b      	ldr	r3, [r3, #8]
 8000cea:	f003 0301 	and.w	r3, r3, #1
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d109      	bne.n	8000d06 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000cfa:	f023 0301 	bic.w	r3, r3, #1
 8000cfe:	f043 0201 	orr.w	r2, r3, #1
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	2200      	movs	r2, #0
 8000d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000d0e:	2300      	movs	r3, #0
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	370c      	adds	r7, #12
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr

08000d1c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b086      	sub	sp, #24
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	60f8      	str	r0, [r7, #12]
 8000d24:	60b9      	str	r1, [r7, #8]
 8000d26:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000d32:	2b01      	cmp	r3, #1
 8000d34:	d101      	bne.n	8000d3a <HAL_ADC_Start_DMA+0x1e>
 8000d36:	2302      	movs	r3, #2
 8000d38:	e0e9      	b.n	8000f0e <HAL_ADC_Start_DMA+0x1f2>
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	689b      	ldr	r3, [r3, #8]
 8000d48:	f003 0301 	and.w	r3, r3, #1
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d018      	beq.n	8000d82 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	689a      	ldr	r2, [r3, #8]
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f042 0201 	orr.w	r2, r2, #1
 8000d5e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000d60:	4b6d      	ldr	r3, [pc, #436]	; (8000f18 <HAL_ADC_Start_DMA+0x1fc>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a6d      	ldr	r2, [pc, #436]	; (8000f1c <HAL_ADC_Start_DMA+0x200>)
 8000d66:	fba2 2303 	umull	r2, r3, r2, r3
 8000d6a:	0c9a      	lsrs	r2, r3, #18
 8000d6c:	4613      	mov	r3, r2
 8000d6e:	005b      	lsls	r3, r3, #1
 8000d70:	4413      	add	r3, r2
 8000d72:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8000d74:	e002      	b.n	8000d7c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8000d76:	693b      	ldr	r3, [r7, #16]
 8000d78:	3b01      	subs	r3, #1
 8000d7a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8000d7c:	693b      	ldr	r3, [r7, #16]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d1f9      	bne.n	8000d76 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	689b      	ldr	r3, [r3, #8]
 8000d88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d90:	d107      	bne.n	8000da2 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	689a      	ldr	r2, [r3, #8]
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000da0:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	689b      	ldr	r3, [r3, #8]
 8000da8:	f003 0301 	and.w	r3, r3, #1
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	f040 80a1 	bne.w	8000ef4 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000dba:	f023 0301 	bic.w	r3, r3, #1
 8000dbe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d007      	beq.n	8000de4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000ddc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000df0:	d106      	bne.n	8000e00 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df6:	f023 0206 	bic.w	r2, r3, #6
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	645a      	str	r2, [r3, #68]	; 0x44
 8000dfe:	e002      	b.n	8000e06 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	2200      	movs	r2, #0
 8000e04:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	2200      	movs	r2, #0
 8000e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000e0e:	4b44      	ldr	r3, [pc, #272]	; (8000f20 <HAL_ADC_Start_DMA+0x204>)
 8000e10:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e16:	4a43      	ldr	r2, [pc, #268]	; (8000f24 <HAL_ADC_Start_DMA+0x208>)
 8000e18:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e1e:	4a42      	ldr	r2, [pc, #264]	; (8000f28 <HAL_ADC_Start_DMA+0x20c>)
 8000e20:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e26:	4a41      	ldr	r2, [pc, #260]	; (8000f2c <HAL_ADC_Start_DMA+0x210>)
 8000e28:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000e32:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	685a      	ldr	r2, [r3, #4]
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8000e42:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	689a      	ldr	r2, [r3, #8]
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000e52:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	334c      	adds	r3, #76	; 0x4c
 8000e5e:	4619      	mov	r1, r3
 8000e60:	68ba      	ldr	r2, [r7, #8]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	f000 fcde 	bl	8001824 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	f003 031f 	and.w	r3, r3, #31
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d12a      	bne.n	8000eca <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a2d      	ldr	r2, [pc, #180]	; (8000f30 <HAL_ADC_Start_DMA+0x214>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d015      	beq.n	8000eaa <HAL_ADC_Start_DMA+0x18e>
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a2c      	ldr	r2, [pc, #176]	; (8000f34 <HAL_ADC_Start_DMA+0x218>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d105      	bne.n	8000e94 <HAL_ADC_Start_DMA+0x178>
 8000e88:	4b25      	ldr	r3, [pc, #148]	; (8000f20 <HAL_ADC_Start_DMA+0x204>)
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f003 031f 	and.w	r3, r3, #31
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d00a      	beq.n	8000eaa <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a27      	ldr	r2, [pc, #156]	; (8000f38 <HAL_ADC_Start_DMA+0x21c>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d136      	bne.n	8000f0c <HAL_ADC_Start_DMA+0x1f0>
 8000e9e:	4b20      	ldr	r3, [pc, #128]	; (8000f20 <HAL_ADC_Start_DMA+0x204>)
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	f003 0310 	and.w	r3, r3, #16
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d130      	bne.n	8000f0c <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	689b      	ldr	r3, [r3, #8]
 8000eb0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d129      	bne.n	8000f0c <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	689a      	ldr	r2, [r3, #8]
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000ec6:	609a      	str	r2, [r3, #8]
 8000ec8:	e020      	b.n	8000f0c <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4a18      	ldr	r2, [pc, #96]	; (8000f30 <HAL_ADC_Start_DMA+0x214>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d11b      	bne.n	8000f0c <HAL_ADC_Start_DMA+0x1f0>
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	689b      	ldr	r3, [r3, #8]
 8000eda:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d114      	bne.n	8000f0c <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	689a      	ldr	r2, [r3, #8]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000ef0:	609a      	str	r2, [r3, #8]
 8000ef2:	e00b      	b.n	8000f0c <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef8:	f043 0210 	orr.w	r2, r3, #16
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f04:	f043 0201 	orr.w	r2, r3, #1
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8000f0c:	2300      	movs	r3, #0
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3718      	adds	r7, #24
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	20000000 	.word	0x20000000
 8000f1c:	431bde83 	.word	0x431bde83
 8000f20:	40012300 	.word	0x40012300
 8000f24:	080013a1 	.word	0x080013a1
 8000f28:	0800145b 	.word	0x0800145b
 8000f2c:	08001477 	.word	0x08001477
 8000f30:	40012000 	.word	0x40012000
 8000f34:	40012100 	.word	0x40012100
 8000f38:	40012200 	.word	0x40012200

08000f3c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8000f44:	bf00      	nop
 8000f46:	370c      	adds	r7, #12
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr

08000f50 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8000f58:	bf00      	nop
 8000f5a:	370c      	adds	r7, #12
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr

08000f64 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b085      	sub	sp, #20
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d101      	bne.n	8000f80 <HAL_ADC_ConfigChannel+0x1c>
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	e105      	b.n	800118c <HAL_ADC_ConfigChannel+0x228>
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2201      	movs	r2, #1
 8000f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	2b09      	cmp	r3, #9
 8000f8e:	d925      	bls.n	8000fdc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	68d9      	ldr	r1, [r3, #12]
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	b29b      	uxth	r3, r3
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	4613      	mov	r3, r2
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	4413      	add	r3, r2
 8000fa4:	3b1e      	subs	r3, #30
 8000fa6:	2207      	movs	r2, #7
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	43da      	mvns	r2, r3
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	400a      	ands	r2, r1
 8000fb4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	68d9      	ldr	r1, [r3, #12]
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	689a      	ldr	r2, [r3, #8]
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	b29b      	uxth	r3, r3
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	4603      	mov	r3, r0
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	4403      	add	r3, r0
 8000fce:	3b1e      	subs	r3, #30
 8000fd0:	409a      	lsls	r2, r3
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	430a      	orrs	r2, r1
 8000fd8:	60da      	str	r2, [r3, #12]
 8000fda:	e022      	b.n	8001022 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	6919      	ldr	r1, [r3, #16]
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	b29b      	uxth	r3, r3
 8000fe8:	461a      	mov	r2, r3
 8000fea:	4613      	mov	r3, r2
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	4413      	add	r3, r2
 8000ff0:	2207      	movs	r2, #7
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	43da      	mvns	r2, r3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	400a      	ands	r2, r1
 8000ffe:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	6919      	ldr	r1, [r3, #16]
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	689a      	ldr	r2, [r3, #8]
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	b29b      	uxth	r3, r3
 8001010:	4618      	mov	r0, r3
 8001012:	4603      	mov	r3, r0
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	4403      	add	r3, r0
 8001018:	409a      	lsls	r2, r3
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	430a      	orrs	r2, r1
 8001020:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	2b06      	cmp	r3, #6
 8001028:	d824      	bhi.n	8001074 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685a      	ldr	r2, [r3, #4]
 8001034:	4613      	mov	r3, r2
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	4413      	add	r3, r2
 800103a:	3b05      	subs	r3, #5
 800103c:	221f      	movs	r2, #31
 800103e:	fa02 f303 	lsl.w	r3, r2, r3
 8001042:	43da      	mvns	r2, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	400a      	ands	r2, r1
 800104a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	b29b      	uxth	r3, r3
 8001058:	4618      	mov	r0, r3
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	685a      	ldr	r2, [r3, #4]
 800105e:	4613      	mov	r3, r2
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	4413      	add	r3, r2
 8001064:	3b05      	subs	r3, #5
 8001066:	fa00 f203 	lsl.w	r2, r0, r3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	430a      	orrs	r2, r1
 8001070:	635a      	str	r2, [r3, #52]	; 0x34
 8001072:	e04c      	b.n	800110e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	2b0c      	cmp	r3, #12
 800107a:	d824      	bhi.n	80010c6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685a      	ldr	r2, [r3, #4]
 8001086:	4613      	mov	r3, r2
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	4413      	add	r3, r2
 800108c:	3b23      	subs	r3, #35	; 0x23
 800108e:	221f      	movs	r2, #31
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	43da      	mvns	r2, r3
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	400a      	ands	r2, r1
 800109c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	b29b      	uxth	r3, r3
 80010aa:	4618      	mov	r0, r3
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685a      	ldr	r2, [r3, #4]
 80010b0:	4613      	mov	r3, r2
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	4413      	add	r3, r2
 80010b6:	3b23      	subs	r3, #35	; 0x23
 80010b8:	fa00 f203 	lsl.w	r2, r0, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	430a      	orrs	r2, r1
 80010c2:	631a      	str	r2, [r3, #48]	; 0x30
 80010c4:	e023      	b.n	800110e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685a      	ldr	r2, [r3, #4]
 80010d0:	4613      	mov	r3, r2
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	4413      	add	r3, r2
 80010d6:	3b41      	subs	r3, #65	; 0x41
 80010d8:	221f      	movs	r2, #31
 80010da:	fa02 f303 	lsl.w	r3, r2, r3
 80010de:	43da      	mvns	r2, r3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	400a      	ands	r2, r1
 80010e6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	b29b      	uxth	r3, r3
 80010f4:	4618      	mov	r0, r3
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685a      	ldr	r2, [r3, #4]
 80010fa:	4613      	mov	r3, r2
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	4413      	add	r3, r2
 8001100:	3b41      	subs	r3, #65	; 0x41
 8001102:	fa00 f203 	lsl.w	r2, r0, r3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	430a      	orrs	r2, r1
 800110c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800110e:	4b22      	ldr	r3, [pc, #136]	; (8001198 <HAL_ADC_ConfigChannel+0x234>)
 8001110:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a21      	ldr	r2, [pc, #132]	; (800119c <HAL_ADC_ConfigChannel+0x238>)
 8001118:	4293      	cmp	r3, r2
 800111a:	d109      	bne.n	8001130 <HAL_ADC_ConfigChannel+0x1cc>
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2b12      	cmp	r3, #18
 8001122:	d105      	bne.n	8001130 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a19      	ldr	r2, [pc, #100]	; (800119c <HAL_ADC_ConfigChannel+0x238>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d123      	bne.n	8001182 <HAL_ADC_ConfigChannel+0x21e>
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	2b10      	cmp	r3, #16
 8001140:	d003      	beq.n	800114a <HAL_ADC_ConfigChannel+0x1e6>
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	2b11      	cmp	r3, #17
 8001148:	d11b      	bne.n	8001182 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	2b10      	cmp	r3, #16
 800115c:	d111      	bne.n	8001182 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800115e:	4b10      	ldr	r3, [pc, #64]	; (80011a0 <HAL_ADC_ConfigChannel+0x23c>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a10      	ldr	r2, [pc, #64]	; (80011a4 <HAL_ADC_ConfigChannel+0x240>)
 8001164:	fba2 2303 	umull	r2, r3, r2, r3
 8001168:	0c9a      	lsrs	r2, r3, #18
 800116a:	4613      	mov	r3, r2
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	4413      	add	r3, r2
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001174:	e002      	b.n	800117c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	3b01      	subs	r3, #1
 800117a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d1f9      	bne.n	8001176 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2200      	movs	r2, #0
 8001186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800118a:	2300      	movs	r3, #0
}
 800118c:	4618      	mov	r0, r3
 800118e:	3714      	adds	r7, #20
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr
 8001198:	40012300 	.word	0x40012300
 800119c:	40012000 	.word	0x40012000
 80011a0:	20000000 	.word	0x20000000
 80011a4:	431bde83 	.word	0x431bde83

080011a8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011b0:	4b79      	ldr	r3, [pc, #484]	; (8001398 <ADC_Init+0x1f0>)
 80011b2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	685a      	ldr	r2, [r3, #4]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	431a      	orrs	r2, r3
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	685a      	ldr	r2, [r3, #4]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80011dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	6859      	ldr	r1, [r3, #4]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	691b      	ldr	r3, [r3, #16]
 80011e8:	021a      	lsls	r2, r3, #8
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	430a      	orrs	r2, r1
 80011f0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	685a      	ldr	r2, [r3, #4]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001200:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	6859      	ldr	r1, [r3, #4]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	689a      	ldr	r2, [r3, #8]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	430a      	orrs	r2, r1
 8001212:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	689a      	ldr	r2, [r3, #8]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001222:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	6899      	ldr	r1, [r3, #8]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	68da      	ldr	r2, [r3, #12]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	430a      	orrs	r2, r1
 8001234:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800123a:	4a58      	ldr	r2, [pc, #352]	; (800139c <ADC_Init+0x1f4>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d022      	beq.n	8001286 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	689a      	ldr	r2, [r3, #8]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800124e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	6899      	ldr	r1, [r3, #8]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	430a      	orrs	r2, r1
 8001260:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	689a      	ldr	r2, [r3, #8]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001270:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	6899      	ldr	r1, [r3, #8]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	430a      	orrs	r2, r1
 8001282:	609a      	str	r2, [r3, #8]
 8001284:	e00f      	b.n	80012a6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	689a      	ldr	r2, [r3, #8]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001294:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	689a      	ldr	r2, [r3, #8]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80012a4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	689a      	ldr	r2, [r3, #8]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f022 0202 	bic.w	r2, r2, #2
 80012b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	6899      	ldr	r1, [r3, #8]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	7e1b      	ldrb	r3, [r3, #24]
 80012c0:	005a      	lsls	r2, r3, #1
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	430a      	orrs	r2, r1
 80012c8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d01b      	beq.n	800130c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	685a      	ldr	r2, [r3, #4]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80012e2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	685a      	ldr	r2, [r3, #4]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80012f2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	6859      	ldr	r1, [r3, #4]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012fe:	3b01      	subs	r3, #1
 8001300:	035a      	lsls	r2, r3, #13
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	430a      	orrs	r2, r1
 8001308:	605a      	str	r2, [r3, #4]
 800130a:	e007      	b.n	800131c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	685a      	ldr	r2, [r3, #4]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800131a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800132a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	69db      	ldr	r3, [r3, #28]
 8001336:	3b01      	subs	r3, #1
 8001338:	051a      	lsls	r2, r3, #20
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	430a      	orrs	r2, r1
 8001340:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	689a      	ldr	r2, [r3, #8]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001350:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	6899      	ldr	r1, [r3, #8]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800135e:	025a      	lsls	r2, r3, #9
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	430a      	orrs	r2, r1
 8001366:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	689a      	ldr	r2, [r3, #8]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001376:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	6899      	ldr	r1, [r3, #8]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	695b      	ldr	r3, [r3, #20]
 8001382:	029a      	lsls	r2, r3, #10
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	430a      	orrs	r2, r1
 800138a:	609a      	str	r2, [r3, #8]
}
 800138c:	bf00      	nop
 800138e:	3714      	adds	r7, #20
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	40012300 	.word	0x40012300
 800139c:	0f000001 	.word	0x0f000001

080013a0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013ac:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d13c      	bne.n	8001434 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013be:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d12b      	bne.n	800142c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d127      	bne.n	800142c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013e2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d006      	beq.n	80013f8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	689b      	ldr	r3, [r3, #8]
 80013f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d119      	bne.n	800142c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	685a      	ldr	r2, [r3, #4]
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f022 0220 	bic.w	r2, r2, #32
 8001406:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001418:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800141c:	2b00      	cmp	r3, #0
 800141e:	d105      	bne.n	800142c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001424:	f043 0201 	orr.w	r2, r3, #1
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800142c:	68f8      	ldr	r0, [r7, #12]
 800142e:	f7ff f85b 	bl	80004e8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001432:	e00e      	b.n	8001452 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001438:	f003 0310 	and.w	r3, r3, #16
 800143c:	2b00      	cmp	r3, #0
 800143e:	d003      	beq.n	8001448 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001440:	68f8      	ldr	r0, [r7, #12]
 8001442:	f7ff fd85 	bl	8000f50 <HAL_ADC_ErrorCallback>
}
 8001446:	e004      	b.n	8001452 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800144c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	4798      	blx	r3
}
 8001452:	bf00      	nop
 8001454:	3710      	adds	r7, #16
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}

0800145a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800145a:	b580      	push	{r7, lr}
 800145c:	b084      	sub	sp, #16
 800145e:	af00      	add	r7, sp, #0
 8001460:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001466:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001468:	68f8      	ldr	r0, [r7, #12]
 800146a:	f7ff fd67 	bl	8000f3c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800146e:	bf00      	nop
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b084      	sub	sp, #16
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001482:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	2240      	movs	r2, #64	; 0x40
 8001488:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800148e:	f043 0204 	orr.w	r2, r3, #4
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001496:	68f8      	ldr	r0, [r7, #12]
 8001498:	f7ff fd5a 	bl	8000f50 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800149c:	bf00      	nop
 800149e:	3710      	adds	r7, #16
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b085      	sub	sp, #20
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	f003 0307 	and.w	r3, r3, #7
 80014b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014b4:	4b0c      	ldr	r3, [pc, #48]	; (80014e8 <__NVIC_SetPriorityGrouping+0x44>)
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ba:	68ba      	ldr	r2, [r7, #8]
 80014bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014c0:	4013      	ands	r3, r2
 80014c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014d6:	4a04      	ldr	r2, [pc, #16]	; (80014e8 <__NVIC_SetPriorityGrouping+0x44>)
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	60d3      	str	r3, [r2, #12]
}
 80014dc:	bf00      	nop
 80014de:	3714      	adds	r7, #20
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr
 80014e8:	e000ed00 	.word	0xe000ed00

080014ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014f0:	4b04      	ldr	r3, [pc, #16]	; (8001504 <__NVIC_GetPriorityGrouping+0x18>)
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	0a1b      	lsrs	r3, r3, #8
 80014f6:	f003 0307 	and.w	r3, r3, #7
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr
 8001504:	e000ed00 	.word	0xe000ed00

08001508 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	4603      	mov	r3, r0
 8001510:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001516:	2b00      	cmp	r3, #0
 8001518:	db0b      	blt.n	8001532 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800151a:	79fb      	ldrb	r3, [r7, #7]
 800151c:	f003 021f 	and.w	r2, r3, #31
 8001520:	4907      	ldr	r1, [pc, #28]	; (8001540 <__NVIC_EnableIRQ+0x38>)
 8001522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001526:	095b      	lsrs	r3, r3, #5
 8001528:	2001      	movs	r0, #1
 800152a:	fa00 f202 	lsl.w	r2, r0, r2
 800152e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001532:	bf00      	nop
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	e000e100 	.word	0xe000e100

08001544 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	6039      	str	r1, [r7, #0]
 800154e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001550:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001554:	2b00      	cmp	r3, #0
 8001556:	db0a      	blt.n	800156e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	b2da      	uxtb	r2, r3
 800155c:	490c      	ldr	r1, [pc, #48]	; (8001590 <__NVIC_SetPriority+0x4c>)
 800155e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001562:	0112      	lsls	r2, r2, #4
 8001564:	b2d2      	uxtb	r2, r2
 8001566:	440b      	add	r3, r1
 8001568:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800156c:	e00a      	b.n	8001584 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	b2da      	uxtb	r2, r3
 8001572:	4908      	ldr	r1, [pc, #32]	; (8001594 <__NVIC_SetPriority+0x50>)
 8001574:	79fb      	ldrb	r3, [r7, #7]
 8001576:	f003 030f 	and.w	r3, r3, #15
 800157a:	3b04      	subs	r3, #4
 800157c:	0112      	lsls	r2, r2, #4
 800157e:	b2d2      	uxtb	r2, r2
 8001580:	440b      	add	r3, r1
 8001582:	761a      	strb	r2, [r3, #24]
}
 8001584:	bf00      	nop
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	e000e100 	.word	0xe000e100
 8001594:	e000ed00 	.word	0xe000ed00

08001598 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001598:	b480      	push	{r7}
 800159a:	b089      	sub	sp, #36	; 0x24
 800159c:	af00      	add	r7, sp, #0
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	60b9      	str	r1, [r7, #8]
 80015a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	f003 0307 	and.w	r3, r3, #7
 80015aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	f1c3 0307 	rsb	r3, r3, #7
 80015b2:	2b04      	cmp	r3, #4
 80015b4:	bf28      	it	cs
 80015b6:	2304      	movcs	r3, #4
 80015b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	3304      	adds	r3, #4
 80015be:	2b06      	cmp	r3, #6
 80015c0:	d902      	bls.n	80015c8 <NVIC_EncodePriority+0x30>
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	3b03      	subs	r3, #3
 80015c6:	e000      	b.n	80015ca <NVIC_EncodePriority+0x32>
 80015c8:	2300      	movs	r3, #0
 80015ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015cc:	f04f 32ff 	mov.w	r2, #4294967295
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	fa02 f303 	lsl.w	r3, r2, r3
 80015d6:	43da      	mvns	r2, r3
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	401a      	ands	r2, r3
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015e0:	f04f 31ff 	mov.w	r1, #4294967295
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	fa01 f303 	lsl.w	r3, r1, r3
 80015ea:	43d9      	mvns	r1, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f0:	4313      	orrs	r3, r2
         );
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3724      	adds	r7, #36	; 0x24
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
	...

08001600 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	3b01      	subs	r3, #1
 800160c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001610:	d301      	bcc.n	8001616 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001612:	2301      	movs	r3, #1
 8001614:	e00f      	b.n	8001636 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001616:	4a0a      	ldr	r2, [pc, #40]	; (8001640 <SysTick_Config+0x40>)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	3b01      	subs	r3, #1
 800161c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800161e:	210f      	movs	r1, #15
 8001620:	f04f 30ff 	mov.w	r0, #4294967295
 8001624:	f7ff ff8e 	bl	8001544 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001628:	4b05      	ldr	r3, [pc, #20]	; (8001640 <SysTick_Config+0x40>)
 800162a:	2200      	movs	r2, #0
 800162c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800162e:	4b04      	ldr	r3, [pc, #16]	; (8001640 <SysTick_Config+0x40>)
 8001630:	2207      	movs	r2, #7
 8001632:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001634:	2300      	movs	r3, #0
}
 8001636:	4618      	mov	r0, r3
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	e000e010 	.word	0xe000e010

08001644 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f7ff ff29 	bl	80014a4 <__NVIC_SetPriorityGrouping>
}
 8001652:	bf00      	nop
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}

0800165a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800165a:	b580      	push	{r7, lr}
 800165c:	b086      	sub	sp, #24
 800165e:	af00      	add	r7, sp, #0
 8001660:	4603      	mov	r3, r0
 8001662:	60b9      	str	r1, [r7, #8]
 8001664:	607a      	str	r2, [r7, #4]
 8001666:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001668:	2300      	movs	r3, #0
 800166a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800166c:	f7ff ff3e 	bl	80014ec <__NVIC_GetPriorityGrouping>
 8001670:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	68b9      	ldr	r1, [r7, #8]
 8001676:	6978      	ldr	r0, [r7, #20]
 8001678:	f7ff ff8e 	bl	8001598 <NVIC_EncodePriority>
 800167c:	4602      	mov	r2, r0
 800167e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001682:	4611      	mov	r1, r2
 8001684:	4618      	mov	r0, r3
 8001686:	f7ff ff5d 	bl	8001544 <__NVIC_SetPriority>
}
 800168a:	bf00      	nop
 800168c:	3718      	adds	r7, #24
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}

08001692 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001692:	b580      	push	{r7, lr}
 8001694:	b082      	sub	sp, #8
 8001696:	af00      	add	r7, sp, #0
 8001698:	4603      	mov	r3, r0
 800169a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800169c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff ff31 	bl	8001508 <__NVIC_EnableIRQ>
}
 80016a6:	bf00      	nop
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b082      	sub	sp, #8
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f7ff ffa2 	bl	8001600 <SysTick_Config>
 80016bc:	4603      	mov	r3, r0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
	...

080016c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b086      	sub	sp, #24
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80016d0:	2300      	movs	r3, #0
 80016d2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80016d4:	f7ff faa0 	bl	8000c18 <HAL_GetTick>
 80016d8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d101      	bne.n	80016e4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	e099      	b.n	8001818 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2202      	movs	r2, #2
 80016e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2200      	movs	r2, #0
 80016f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f022 0201 	bic.w	r2, r2, #1
 8001702:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001704:	e00f      	b.n	8001726 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001706:	f7ff fa87 	bl	8000c18 <HAL_GetTick>
 800170a:	4602      	mov	r2, r0
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	2b05      	cmp	r3, #5
 8001712:	d908      	bls.n	8001726 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2220      	movs	r2, #32
 8001718:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2203      	movs	r2, #3
 800171e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e078      	b.n	8001818 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 0301 	and.w	r3, r3, #1
 8001730:	2b00      	cmp	r3, #0
 8001732:	d1e8      	bne.n	8001706 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800173c:	697a      	ldr	r2, [r7, #20]
 800173e:	4b38      	ldr	r3, [pc, #224]	; (8001820 <HAL_DMA_Init+0x158>)
 8001740:	4013      	ands	r3, r2
 8001742:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	685a      	ldr	r2, [r3, #4]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001752:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	691b      	ldr	r3, [r3, #16]
 8001758:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800175e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	699b      	ldr	r3, [r3, #24]
 8001764:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800176a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6a1b      	ldr	r3, [r3, #32]
 8001770:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001772:	697a      	ldr	r2, [r7, #20]
 8001774:	4313      	orrs	r3, r2
 8001776:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800177c:	2b04      	cmp	r3, #4
 800177e:	d107      	bne.n	8001790 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001788:	4313      	orrs	r3, r2
 800178a:	697a      	ldr	r2, [r7, #20]
 800178c:	4313      	orrs	r3, r2
 800178e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	697a      	ldr	r2, [r7, #20]
 8001796:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	695b      	ldr	r3, [r3, #20]
 800179e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	f023 0307 	bic.w	r3, r3, #7
 80017a6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ac:	697a      	ldr	r2, [r7, #20]
 80017ae:	4313      	orrs	r3, r2
 80017b0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b6:	2b04      	cmp	r3, #4
 80017b8:	d117      	bne.n	80017ea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017be:	697a      	ldr	r2, [r7, #20]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d00e      	beq.n	80017ea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f000 fa6f 	bl	8001cb0 <DMA_CheckFifoParam>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d008      	beq.n	80017ea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2240      	movs	r2, #64	; 0x40
 80017dc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2201      	movs	r2, #1
 80017e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80017e6:	2301      	movs	r3, #1
 80017e8:	e016      	b.n	8001818 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	697a      	ldr	r2, [r7, #20]
 80017f0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f000 fa26 	bl	8001c44 <DMA_CalcBaseAndBitshift>
 80017f8:	4603      	mov	r3, r0
 80017fa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001800:	223f      	movs	r2, #63	; 0x3f
 8001802:	409a      	lsls	r2, r3
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2200      	movs	r2, #0
 800180c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2201      	movs	r2, #1
 8001812:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001816:	2300      	movs	r3, #0
}
 8001818:	4618      	mov	r0, r3
 800181a:	3718      	adds	r7, #24
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	f010803f 	.word	0xf010803f

08001824 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b086      	sub	sp, #24
 8001828:	af00      	add	r7, sp, #0
 800182a:	60f8      	str	r0, [r7, #12]
 800182c:	60b9      	str	r1, [r7, #8]
 800182e:	607a      	str	r2, [r7, #4]
 8001830:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001832:	2300      	movs	r3, #0
 8001834:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800183a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001842:	2b01      	cmp	r3, #1
 8001844:	d101      	bne.n	800184a <HAL_DMA_Start_IT+0x26>
 8001846:	2302      	movs	r3, #2
 8001848:	e040      	b.n	80018cc <HAL_DMA_Start_IT+0xa8>
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	2201      	movs	r2, #1
 800184e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001858:	b2db      	uxtb	r3, r3
 800185a:	2b01      	cmp	r3, #1
 800185c:	d12f      	bne.n	80018be <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	2202      	movs	r2, #2
 8001862:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	2200      	movs	r2, #0
 800186a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	68b9      	ldr	r1, [r7, #8]
 8001872:	68f8      	ldr	r0, [r7, #12]
 8001874:	f000 f9b8 	bl	8001be8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800187c:	223f      	movs	r2, #63	; 0x3f
 800187e:	409a      	lsls	r2, r3
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f042 0216 	orr.w	r2, r2, #22
 8001892:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001898:	2b00      	cmp	r3, #0
 800189a:	d007      	beq.n	80018ac <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f042 0208 	orr.w	r2, r2, #8
 80018aa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f042 0201 	orr.w	r2, r2, #1
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	e005      	b.n	80018ca <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	2200      	movs	r2, #0
 80018c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80018c6:	2302      	movs	r3, #2
 80018c8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80018ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3718      	adds	r7, #24
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b086      	sub	sp, #24
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80018dc:	2300      	movs	r3, #0
 80018de:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80018e0:	4b8e      	ldr	r3, [pc, #568]	; (8001b1c <HAL_DMA_IRQHandler+0x248>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a8e      	ldr	r2, [pc, #568]	; (8001b20 <HAL_DMA_IRQHandler+0x24c>)
 80018e6:	fba2 2303 	umull	r2, r3, r2, r3
 80018ea:	0a9b      	lsrs	r3, r3, #10
 80018ec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018f2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018fe:	2208      	movs	r2, #8
 8001900:	409a      	lsls	r2, r3
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	4013      	ands	r3, r2
 8001906:	2b00      	cmp	r3, #0
 8001908:	d01a      	beq.n	8001940 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 0304 	and.w	r3, r3, #4
 8001914:	2b00      	cmp	r3, #0
 8001916:	d013      	beq.n	8001940 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f022 0204 	bic.w	r2, r2, #4
 8001926:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800192c:	2208      	movs	r2, #8
 800192e:	409a      	lsls	r2, r3
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001938:	f043 0201 	orr.w	r2, r3, #1
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001944:	2201      	movs	r2, #1
 8001946:	409a      	lsls	r2, r3
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	4013      	ands	r3, r2
 800194c:	2b00      	cmp	r3, #0
 800194e:	d012      	beq.n	8001976 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	695b      	ldr	r3, [r3, #20]
 8001956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800195a:	2b00      	cmp	r3, #0
 800195c:	d00b      	beq.n	8001976 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001962:	2201      	movs	r2, #1
 8001964:	409a      	lsls	r2, r3
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800196e:	f043 0202 	orr.w	r2, r3, #2
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800197a:	2204      	movs	r2, #4
 800197c:	409a      	lsls	r2, r3
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	4013      	ands	r3, r2
 8001982:	2b00      	cmp	r3, #0
 8001984:	d012      	beq.n	80019ac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0302 	and.w	r3, r3, #2
 8001990:	2b00      	cmp	r3, #0
 8001992:	d00b      	beq.n	80019ac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001998:	2204      	movs	r2, #4
 800199a:	409a      	lsls	r2, r3
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019a4:	f043 0204 	orr.w	r2, r3, #4
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019b0:	2210      	movs	r2, #16
 80019b2:	409a      	lsls	r2, r3
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	4013      	ands	r3, r2
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d043      	beq.n	8001a44 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0308 	and.w	r3, r3, #8
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d03c      	beq.n	8001a44 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ce:	2210      	movs	r2, #16
 80019d0:	409a      	lsls	r2, r3
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d018      	beq.n	8001a16 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d108      	bne.n	8001a04 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d024      	beq.n	8001a44 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	4798      	blx	r3
 8001a02:	e01f      	b.n	8001a44 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d01b      	beq.n	8001a44 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	4798      	blx	r3
 8001a14:	e016      	b.n	8001a44 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d107      	bne.n	8001a34 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f022 0208 	bic.w	r2, r2, #8
 8001a32:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d003      	beq.n	8001a44 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a48:	2220      	movs	r2, #32
 8001a4a:	409a      	lsls	r2, r3
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	4013      	ands	r3, r2
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	f000 808f 	beq.w	8001b74 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0310 	and.w	r3, r3, #16
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	f000 8087 	beq.w	8001b74 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a6a:	2220      	movs	r2, #32
 8001a6c:	409a      	lsls	r2, r3
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	2b05      	cmp	r3, #5
 8001a7c:	d136      	bne.n	8001aec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f022 0216 	bic.w	r2, r2, #22
 8001a8c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	695a      	ldr	r2, [r3, #20]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a9c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d103      	bne.n	8001aae <HAL_DMA_IRQHandler+0x1da>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d007      	beq.n	8001abe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f022 0208 	bic.w	r2, r2, #8
 8001abc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ac2:	223f      	movs	r2, #63	; 0x3f
 8001ac4:	409a      	lsls	r2, r3
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2201      	movs	r2, #1
 8001ace:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d07e      	beq.n	8001be0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	4798      	blx	r3
        }
        return;
 8001aea:	e079      	b.n	8001be0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d01d      	beq.n	8001b36 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d10d      	bne.n	8001b24 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d031      	beq.n	8001b74 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	4798      	blx	r3
 8001b18:	e02c      	b.n	8001b74 <HAL_DMA_IRQHandler+0x2a0>
 8001b1a:	bf00      	nop
 8001b1c:	20000000 	.word	0x20000000
 8001b20:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d023      	beq.n	8001b74 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	4798      	blx	r3
 8001b34:	e01e      	b.n	8001b74 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d10f      	bne.n	8001b64 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f022 0210 	bic.w	r2, r2, #16
 8001b52:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2201      	movs	r2, #1
 8001b58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d003      	beq.n	8001b74 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d032      	beq.n	8001be2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b80:	f003 0301 	and.w	r3, r3, #1
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d022      	beq.n	8001bce <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2205      	movs	r2, #5
 8001b8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f022 0201 	bic.w	r2, r2, #1
 8001b9e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	60bb      	str	r3, [r7, #8]
 8001ba6:	697a      	ldr	r2, [r7, #20]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d307      	bcc.n	8001bbc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0301 	and.w	r3, r3, #1
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d1f2      	bne.n	8001ba0 <HAL_DMA_IRQHandler+0x2cc>
 8001bba:	e000      	b.n	8001bbe <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001bbc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d005      	beq.n	8001be2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	4798      	blx	r3
 8001bde:	e000      	b.n	8001be2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001be0:	bf00      	nop
    }
  }
}
 8001be2:	3718      	adds	r7, #24
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b085      	sub	sp, #20
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	60b9      	str	r1, [r7, #8]
 8001bf2:	607a      	str	r2, [r7, #4]
 8001bf4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001c04:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	683a      	ldr	r2, [r7, #0]
 8001c0c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	2b40      	cmp	r3, #64	; 0x40
 8001c14:	d108      	bne.n	8001c28 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	68ba      	ldr	r2, [r7, #8]
 8001c24:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001c26:	e007      	b.n	8001c38 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	68ba      	ldr	r2, [r7, #8]
 8001c2e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	60da      	str	r2, [r3, #12]
}
 8001c38:	bf00      	nop
 8001c3a:	3714      	adds	r7, #20
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b085      	sub	sp, #20
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	3b10      	subs	r3, #16
 8001c54:	4a14      	ldr	r2, [pc, #80]	; (8001ca8 <DMA_CalcBaseAndBitshift+0x64>)
 8001c56:	fba2 2303 	umull	r2, r3, r2, r3
 8001c5a:	091b      	lsrs	r3, r3, #4
 8001c5c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001c5e:	4a13      	ldr	r2, [pc, #76]	; (8001cac <DMA_CalcBaseAndBitshift+0x68>)
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	4413      	add	r3, r2
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	461a      	mov	r2, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2b03      	cmp	r3, #3
 8001c70:	d909      	bls.n	8001c86 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001c7a:	f023 0303 	bic.w	r3, r3, #3
 8001c7e:	1d1a      	adds	r2, r3, #4
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	659a      	str	r2, [r3, #88]	; 0x58
 8001c84:	e007      	b.n	8001c96 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001c8e:	f023 0303 	bic.w	r3, r3, #3
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3714      	adds	r7, #20
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	aaaaaaab 	.word	0xaaaaaaab
 8001cac:	08002b70 	.word	0x08002b70

08001cb0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b085      	sub	sp, #20
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cc0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	699b      	ldr	r3, [r3, #24]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d11f      	bne.n	8001d0a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	2b03      	cmp	r3, #3
 8001cce:	d856      	bhi.n	8001d7e <DMA_CheckFifoParam+0xce>
 8001cd0:	a201      	add	r2, pc, #4	; (adr r2, 8001cd8 <DMA_CheckFifoParam+0x28>)
 8001cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cd6:	bf00      	nop
 8001cd8:	08001ce9 	.word	0x08001ce9
 8001cdc:	08001cfb 	.word	0x08001cfb
 8001ce0:	08001ce9 	.word	0x08001ce9
 8001ce4:	08001d7f 	.word	0x08001d7f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d046      	beq.n	8001d82 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001cf8:	e043      	b.n	8001d82 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cfe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001d02:	d140      	bne.n	8001d86 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d08:	e03d      	b.n	8001d86 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	699b      	ldr	r3, [r3, #24]
 8001d0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d12:	d121      	bne.n	8001d58 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	2b03      	cmp	r3, #3
 8001d18:	d837      	bhi.n	8001d8a <DMA_CheckFifoParam+0xda>
 8001d1a:	a201      	add	r2, pc, #4	; (adr r2, 8001d20 <DMA_CheckFifoParam+0x70>)
 8001d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d20:	08001d31 	.word	0x08001d31
 8001d24:	08001d37 	.word	0x08001d37
 8001d28:	08001d31 	.word	0x08001d31
 8001d2c:	08001d49 	.word	0x08001d49
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	73fb      	strb	r3, [r7, #15]
      break;
 8001d34:	e030      	b.n	8001d98 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d025      	beq.n	8001d8e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d46:	e022      	b.n	8001d8e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d4c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001d50:	d11f      	bne.n	8001d92 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001d56:	e01c      	b.n	8001d92 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d903      	bls.n	8001d66 <DMA_CheckFifoParam+0xb6>
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	2b03      	cmp	r3, #3
 8001d62:	d003      	beq.n	8001d6c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001d64:	e018      	b.n	8001d98 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	73fb      	strb	r3, [r7, #15]
      break;
 8001d6a:	e015      	b.n	8001d98 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d00e      	beq.n	8001d96 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	73fb      	strb	r3, [r7, #15]
      break;
 8001d7c:	e00b      	b.n	8001d96 <DMA_CheckFifoParam+0xe6>
      break;
 8001d7e:	bf00      	nop
 8001d80:	e00a      	b.n	8001d98 <DMA_CheckFifoParam+0xe8>
      break;
 8001d82:	bf00      	nop
 8001d84:	e008      	b.n	8001d98 <DMA_CheckFifoParam+0xe8>
      break;
 8001d86:	bf00      	nop
 8001d88:	e006      	b.n	8001d98 <DMA_CheckFifoParam+0xe8>
      break;
 8001d8a:	bf00      	nop
 8001d8c:	e004      	b.n	8001d98 <DMA_CheckFifoParam+0xe8>
      break;
 8001d8e:	bf00      	nop
 8001d90:	e002      	b.n	8001d98 <DMA_CheckFifoParam+0xe8>
      break;   
 8001d92:	bf00      	nop
 8001d94:	e000      	b.n	8001d98 <DMA_CheckFifoParam+0xe8>
      break;
 8001d96:	bf00      	nop
    }
  } 
  
  return status; 
 8001d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3714      	adds	r7, #20
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop

08001da8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b089      	sub	sp, #36	; 0x24
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001db2:	2300      	movs	r3, #0
 8001db4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001db6:	2300      	movs	r3, #0
 8001db8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	61fb      	str	r3, [r7, #28]
 8001dc2:	e16b      	b.n	800209c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dcc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	697a      	ldr	r2, [r7, #20]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001dd8:	693a      	ldr	r2, [r7, #16]
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	f040 815a 	bne.w	8002096 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f003 0303 	and.w	r3, r3, #3
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d005      	beq.n	8001dfa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d130      	bne.n	8001e5c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	005b      	lsls	r3, r3, #1
 8001e04:	2203      	movs	r2, #3
 8001e06:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0a:	43db      	mvns	r3, r3
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	4013      	ands	r3, r2
 8001e10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	68da      	ldr	r2, [r3, #12]
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1e:	69ba      	ldr	r2, [r7, #24]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	69ba      	ldr	r2, [r7, #24]
 8001e28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e30:	2201      	movs	r2, #1
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	43db      	mvns	r3, r3
 8001e3a:	69ba      	ldr	r2, [r7, #24]
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	091b      	lsrs	r3, r3, #4
 8001e46:	f003 0201 	and.w	r2, r3, #1
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e50:	69ba      	ldr	r2, [r7, #24]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f003 0303 	and.w	r3, r3, #3
 8001e64:	2b03      	cmp	r3, #3
 8001e66:	d017      	beq.n	8001e98 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	2203      	movs	r2, #3
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	43db      	mvns	r3, r3
 8001e7a:	69ba      	ldr	r2, [r7, #24]
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	689a      	ldr	r2, [r3, #8]
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f003 0303 	and.w	r3, r3, #3
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d123      	bne.n	8001eec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	08da      	lsrs	r2, r3, #3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	3208      	adds	r2, #8
 8001eac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	f003 0307 	and.w	r3, r3, #7
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	220f      	movs	r2, #15
 8001ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec0:	43db      	mvns	r3, r3
 8001ec2:	69ba      	ldr	r2, [r7, #24]
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	691a      	ldr	r2, [r3, #16]
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	f003 0307 	and.w	r3, r3, #7
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	08da      	lsrs	r2, r3, #3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	3208      	adds	r2, #8
 8001ee6:	69b9      	ldr	r1, [r7, #24]
 8001ee8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	2203      	movs	r2, #3
 8001ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8001efc:	43db      	mvns	r3, r3
 8001efe:	69ba      	ldr	r2, [r7, #24]
 8001f00:	4013      	ands	r3, r2
 8001f02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f003 0203 	and.w	r2, r3, #3
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	005b      	lsls	r3, r3, #1
 8001f10:	fa02 f303 	lsl.w	r3, r2, r3
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	f000 80b4 	beq.w	8002096 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f2e:	2300      	movs	r3, #0
 8001f30:	60fb      	str	r3, [r7, #12]
 8001f32:	4b60      	ldr	r3, [pc, #384]	; (80020b4 <HAL_GPIO_Init+0x30c>)
 8001f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f36:	4a5f      	ldr	r2, [pc, #380]	; (80020b4 <HAL_GPIO_Init+0x30c>)
 8001f38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f3c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f3e:	4b5d      	ldr	r3, [pc, #372]	; (80020b4 <HAL_GPIO_Init+0x30c>)
 8001f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f46:	60fb      	str	r3, [r7, #12]
 8001f48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f4a:	4a5b      	ldr	r2, [pc, #364]	; (80020b8 <HAL_GPIO_Init+0x310>)
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	089b      	lsrs	r3, r3, #2
 8001f50:	3302      	adds	r3, #2
 8001f52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	f003 0303 	and.w	r3, r3, #3
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	220f      	movs	r2, #15
 8001f62:	fa02 f303 	lsl.w	r3, r2, r3
 8001f66:	43db      	mvns	r3, r3
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a52      	ldr	r2, [pc, #328]	; (80020bc <HAL_GPIO_Init+0x314>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d02b      	beq.n	8001fce <HAL_GPIO_Init+0x226>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a51      	ldr	r2, [pc, #324]	; (80020c0 <HAL_GPIO_Init+0x318>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d025      	beq.n	8001fca <HAL_GPIO_Init+0x222>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a50      	ldr	r2, [pc, #320]	; (80020c4 <HAL_GPIO_Init+0x31c>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d01f      	beq.n	8001fc6 <HAL_GPIO_Init+0x21e>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a4f      	ldr	r2, [pc, #316]	; (80020c8 <HAL_GPIO_Init+0x320>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d019      	beq.n	8001fc2 <HAL_GPIO_Init+0x21a>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a4e      	ldr	r2, [pc, #312]	; (80020cc <HAL_GPIO_Init+0x324>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d013      	beq.n	8001fbe <HAL_GPIO_Init+0x216>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a4d      	ldr	r2, [pc, #308]	; (80020d0 <HAL_GPIO_Init+0x328>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d00d      	beq.n	8001fba <HAL_GPIO_Init+0x212>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a4c      	ldr	r2, [pc, #304]	; (80020d4 <HAL_GPIO_Init+0x32c>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d007      	beq.n	8001fb6 <HAL_GPIO_Init+0x20e>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a4b      	ldr	r2, [pc, #300]	; (80020d8 <HAL_GPIO_Init+0x330>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d101      	bne.n	8001fb2 <HAL_GPIO_Init+0x20a>
 8001fae:	2307      	movs	r3, #7
 8001fb0:	e00e      	b.n	8001fd0 <HAL_GPIO_Init+0x228>
 8001fb2:	2308      	movs	r3, #8
 8001fb4:	e00c      	b.n	8001fd0 <HAL_GPIO_Init+0x228>
 8001fb6:	2306      	movs	r3, #6
 8001fb8:	e00a      	b.n	8001fd0 <HAL_GPIO_Init+0x228>
 8001fba:	2305      	movs	r3, #5
 8001fbc:	e008      	b.n	8001fd0 <HAL_GPIO_Init+0x228>
 8001fbe:	2304      	movs	r3, #4
 8001fc0:	e006      	b.n	8001fd0 <HAL_GPIO_Init+0x228>
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e004      	b.n	8001fd0 <HAL_GPIO_Init+0x228>
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	e002      	b.n	8001fd0 <HAL_GPIO_Init+0x228>
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e000      	b.n	8001fd0 <HAL_GPIO_Init+0x228>
 8001fce:	2300      	movs	r3, #0
 8001fd0:	69fa      	ldr	r2, [r7, #28]
 8001fd2:	f002 0203 	and.w	r2, r2, #3
 8001fd6:	0092      	lsls	r2, r2, #2
 8001fd8:	4093      	lsls	r3, r2
 8001fda:	69ba      	ldr	r2, [r7, #24]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fe0:	4935      	ldr	r1, [pc, #212]	; (80020b8 <HAL_GPIO_Init+0x310>)
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	089b      	lsrs	r3, r3, #2
 8001fe6:	3302      	adds	r3, #2
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fee:	4b3b      	ldr	r3, [pc, #236]	; (80020dc <HAL_GPIO_Init+0x334>)
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	43db      	mvns	r3, r3
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d003      	beq.n	8002012 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800200a:	69ba      	ldr	r2, [r7, #24]
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	4313      	orrs	r3, r2
 8002010:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002012:	4a32      	ldr	r2, [pc, #200]	; (80020dc <HAL_GPIO_Init+0x334>)
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002018:	4b30      	ldr	r3, [pc, #192]	; (80020dc <HAL_GPIO_Init+0x334>)
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	43db      	mvns	r3, r3
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	4013      	ands	r3, r2
 8002026:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d003      	beq.n	800203c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	4313      	orrs	r3, r2
 800203a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800203c:	4a27      	ldr	r2, [pc, #156]	; (80020dc <HAL_GPIO_Init+0x334>)
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002042:	4b26      	ldr	r3, [pc, #152]	; (80020dc <HAL_GPIO_Init+0x334>)
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	43db      	mvns	r3, r3
 800204c:	69ba      	ldr	r2, [r7, #24]
 800204e:	4013      	ands	r3, r2
 8002050:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d003      	beq.n	8002066 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800205e:	69ba      	ldr	r2, [r7, #24]
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	4313      	orrs	r3, r2
 8002064:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002066:	4a1d      	ldr	r2, [pc, #116]	; (80020dc <HAL_GPIO_Init+0x334>)
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800206c:	4b1b      	ldr	r3, [pc, #108]	; (80020dc <HAL_GPIO_Init+0x334>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	43db      	mvns	r3, r3
 8002076:	69ba      	ldr	r2, [r7, #24]
 8002078:	4013      	ands	r3, r2
 800207a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d003      	beq.n	8002090 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	4313      	orrs	r3, r2
 800208e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002090:	4a12      	ldr	r2, [pc, #72]	; (80020dc <HAL_GPIO_Init+0x334>)
 8002092:	69bb      	ldr	r3, [r7, #24]
 8002094:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	3301      	adds	r3, #1
 800209a:	61fb      	str	r3, [r7, #28]
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	2b0f      	cmp	r3, #15
 80020a0:	f67f ae90 	bls.w	8001dc4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020a4:	bf00      	nop
 80020a6:	bf00      	nop
 80020a8:	3724      	adds	r7, #36	; 0x24
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	40023800 	.word	0x40023800
 80020b8:	40013800 	.word	0x40013800
 80020bc:	40020000 	.word	0x40020000
 80020c0:	40020400 	.word	0x40020400
 80020c4:	40020800 	.word	0x40020800
 80020c8:	40020c00 	.word	0x40020c00
 80020cc:	40021000 	.word	0x40021000
 80020d0:	40021400 	.word	0x40021400
 80020d4:	40021800 	.word	0x40021800
 80020d8:	40021c00 	.word	0x40021c00
 80020dc:	40013c00 	.word	0x40013c00

080020e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	460b      	mov	r3, r1
 80020ea:	807b      	strh	r3, [r7, #2]
 80020ec:	4613      	mov	r3, r2
 80020ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020f0:	787b      	ldrb	r3, [r7, #1]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d003      	beq.n	80020fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020f6:	887a      	ldrh	r2, [r7, #2]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80020fc:	e003      	b.n	8002106 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020fe:	887b      	ldrh	r3, [r7, #2]
 8002100:	041a      	lsls	r2, r3, #16
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	619a      	str	r2, [r3, #24]
}
 8002106:	bf00      	nop
 8002108:	370c      	adds	r7, #12
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
	...

08002114 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b086      	sub	sp, #24
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d101      	bne.n	8002126 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e267      	b.n	80025f6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0301 	and.w	r3, r3, #1
 800212e:	2b00      	cmp	r3, #0
 8002130:	d075      	beq.n	800221e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002132:	4b88      	ldr	r3, [pc, #544]	; (8002354 <HAL_RCC_OscConfig+0x240>)
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	f003 030c 	and.w	r3, r3, #12
 800213a:	2b04      	cmp	r3, #4
 800213c:	d00c      	beq.n	8002158 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800213e:	4b85      	ldr	r3, [pc, #532]	; (8002354 <HAL_RCC_OscConfig+0x240>)
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002146:	2b08      	cmp	r3, #8
 8002148:	d112      	bne.n	8002170 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800214a:	4b82      	ldr	r3, [pc, #520]	; (8002354 <HAL_RCC_OscConfig+0x240>)
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002152:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002156:	d10b      	bne.n	8002170 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002158:	4b7e      	ldr	r3, [pc, #504]	; (8002354 <HAL_RCC_OscConfig+0x240>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d05b      	beq.n	800221c <HAL_RCC_OscConfig+0x108>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d157      	bne.n	800221c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e242      	b.n	80025f6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002178:	d106      	bne.n	8002188 <HAL_RCC_OscConfig+0x74>
 800217a:	4b76      	ldr	r3, [pc, #472]	; (8002354 <HAL_RCC_OscConfig+0x240>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a75      	ldr	r2, [pc, #468]	; (8002354 <HAL_RCC_OscConfig+0x240>)
 8002180:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002184:	6013      	str	r3, [r2, #0]
 8002186:	e01d      	b.n	80021c4 <HAL_RCC_OscConfig+0xb0>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002190:	d10c      	bne.n	80021ac <HAL_RCC_OscConfig+0x98>
 8002192:	4b70      	ldr	r3, [pc, #448]	; (8002354 <HAL_RCC_OscConfig+0x240>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a6f      	ldr	r2, [pc, #444]	; (8002354 <HAL_RCC_OscConfig+0x240>)
 8002198:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800219c:	6013      	str	r3, [r2, #0]
 800219e:	4b6d      	ldr	r3, [pc, #436]	; (8002354 <HAL_RCC_OscConfig+0x240>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a6c      	ldr	r2, [pc, #432]	; (8002354 <HAL_RCC_OscConfig+0x240>)
 80021a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021a8:	6013      	str	r3, [r2, #0]
 80021aa:	e00b      	b.n	80021c4 <HAL_RCC_OscConfig+0xb0>
 80021ac:	4b69      	ldr	r3, [pc, #420]	; (8002354 <HAL_RCC_OscConfig+0x240>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a68      	ldr	r2, [pc, #416]	; (8002354 <HAL_RCC_OscConfig+0x240>)
 80021b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021b6:	6013      	str	r3, [r2, #0]
 80021b8:	4b66      	ldr	r3, [pc, #408]	; (8002354 <HAL_RCC_OscConfig+0x240>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a65      	ldr	r2, [pc, #404]	; (8002354 <HAL_RCC_OscConfig+0x240>)
 80021be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d013      	beq.n	80021f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021cc:	f7fe fd24 	bl	8000c18 <HAL_GetTick>
 80021d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021d2:	e008      	b.n	80021e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021d4:	f7fe fd20 	bl	8000c18 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	2b64      	cmp	r3, #100	; 0x64
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e207      	b.n	80025f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021e6:	4b5b      	ldr	r3, [pc, #364]	; (8002354 <HAL_RCC_OscConfig+0x240>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d0f0      	beq.n	80021d4 <HAL_RCC_OscConfig+0xc0>
 80021f2:	e014      	b.n	800221e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f4:	f7fe fd10 	bl	8000c18 <HAL_GetTick>
 80021f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021fa:	e008      	b.n	800220e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021fc:	f7fe fd0c 	bl	8000c18 <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	2b64      	cmp	r3, #100	; 0x64
 8002208:	d901      	bls.n	800220e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e1f3      	b.n	80025f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800220e:	4b51      	ldr	r3, [pc, #324]	; (8002354 <HAL_RCC_OscConfig+0x240>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d1f0      	bne.n	80021fc <HAL_RCC_OscConfig+0xe8>
 800221a:	e000      	b.n	800221e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800221c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d063      	beq.n	80022f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800222a:	4b4a      	ldr	r3, [pc, #296]	; (8002354 <HAL_RCC_OscConfig+0x240>)
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	f003 030c 	and.w	r3, r3, #12
 8002232:	2b00      	cmp	r3, #0
 8002234:	d00b      	beq.n	800224e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002236:	4b47      	ldr	r3, [pc, #284]	; (8002354 <HAL_RCC_OscConfig+0x240>)
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800223e:	2b08      	cmp	r3, #8
 8002240:	d11c      	bne.n	800227c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002242:	4b44      	ldr	r3, [pc, #272]	; (8002354 <HAL_RCC_OscConfig+0x240>)
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d116      	bne.n	800227c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800224e:	4b41      	ldr	r3, [pc, #260]	; (8002354 <HAL_RCC_OscConfig+0x240>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0302 	and.w	r3, r3, #2
 8002256:	2b00      	cmp	r3, #0
 8002258:	d005      	beq.n	8002266 <HAL_RCC_OscConfig+0x152>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	2b01      	cmp	r3, #1
 8002260:	d001      	beq.n	8002266 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e1c7      	b.n	80025f6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002266:	4b3b      	ldr	r3, [pc, #236]	; (8002354 <HAL_RCC_OscConfig+0x240>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	691b      	ldr	r3, [r3, #16]
 8002272:	00db      	lsls	r3, r3, #3
 8002274:	4937      	ldr	r1, [pc, #220]	; (8002354 <HAL_RCC_OscConfig+0x240>)
 8002276:	4313      	orrs	r3, r2
 8002278:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800227a:	e03a      	b.n	80022f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d020      	beq.n	80022c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002284:	4b34      	ldr	r3, [pc, #208]	; (8002358 <HAL_RCC_OscConfig+0x244>)
 8002286:	2201      	movs	r2, #1
 8002288:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800228a:	f7fe fcc5 	bl	8000c18 <HAL_GetTick>
 800228e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002290:	e008      	b.n	80022a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002292:	f7fe fcc1 	bl	8000c18 <HAL_GetTick>
 8002296:	4602      	mov	r2, r0
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	2b02      	cmp	r3, #2
 800229e:	d901      	bls.n	80022a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80022a0:	2303      	movs	r3, #3
 80022a2:	e1a8      	b.n	80025f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022a4:	4b2b      	ldr	r3, [pc, #172]	; (8002354 <HAL_RCC_OscConfig+0x240>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0302 	and.w	r3, r3, #2
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d0f0      	beq.n	8002292 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022b0:	4b28      	ldr	r3, [pc, #160]	; (8002354 <HAL_RCC_OscConfig+0x240>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	691b      	ldr	r3, [r3, #16]
 80022bc:	00db      	lsls	r3, r3, #3
 80022be:	4925      	ldr	r1, [pc, #148]	; (8002354 <HAL_RCC_OscConfig+0x240>)
 80022c0:	4313      	orrs	r3, r2
 80022c2:	600b      	str	r3, [r1, #0]
 80022c4:	e015      	b.n	80022f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022c6:	4b24      	ldr	r3, [pc, #144]	; (8002358 <HAL_RCC_OscConfig+0x244>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022cc:	f7fe fca4 	bl	8000c18 <HAL_GetTick>
 80022d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022d2:	e008      	b.n	80022e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022d4:	f7fe fca0 	bl	8000c18 <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e187      	b.n	80025f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022e6:	4b1b      	ldr	r3, [pc, #108]	; (8002354 <HAL_RCC_OscConfig+0x240>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d1f0      	bne.n	80022d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0308 	and.w	r3, r3, #8
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d036      	beq.n	800236c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	695b      	ldr	r3, [r3, #20]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d016      	beq.n	8002334 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002306:	4b15      	ldr	r3, [pc, #84]	; (800235c <HAL_RCC_OscConfig+0x248>)
 8002308:	2201      	movs	r2, #1
 800230a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800230c:	f7fe fc84 	bl	8000c18 <HAL_GetTick>
 8002310:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002312:	e008      	b.n	8002326 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002314:	f7fe fc80 	bl	8000c18 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	2b02      	cmp	r3, #2
 8002320:	d901      	bls.n	8002326 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e167      	b.n	80025f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002326:	4b0b      	ldr	r3, [pc, #44]	; (8002354 <HAL_RCC_OscConfig+0x240>)
 8002328:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800232a:	f003 0302 	and.w	r3, r3, #2
 800232e:	2b00      	cmp	r3, #0
 8002330:	d0f0      	beq.n	8002314 <HAL_RCC_OscConfig+0x200>
 8002332:	e01b      	b.n	800236c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002334:	4b09      	ldr	r3, [pc, #36]	; (800235c <HAL_RCC_OscConfig+0x248>)
 8002336:	2200      	movs	r2, #0
 8002338:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800233a:	f7fe fc6d 	bl	8000c18 <HAL_GetTick>
 800233e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002340:	e00e      	b.n	8002360 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002342:	f7fe fc69 	bl	8000c18 <HAL_GetTick>
 8002346:	4602      	mov	r2, r0
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	2b02      	cmp	r3, #2
 800234e:	d907      	bls.n	8002360 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002350:	2303      	movs	r3, #3
 8002352:	e150      	b.n	80025f6 <HAL_RCC_OscConfig+0x4e2>
 8002354:	40023800 	.word	0x40023800
 8002358:	42470000 	.word	0x42470000
 800235c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002360:	4b88      	ldr	r3, [pc, #544]	; (8002584 <HAL_RCC_OscConfig+0x470>)
 8002362:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002364:	f003 0302 	and.w	r3, r3, #2
 8002368:	2b00      	cmp	r3, #0
 800236a:	d1ea      	bne.n	8002342 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0304 	and.w	r3, r3, #4
 8002374:	2b00      	cmp	r3, #0
 8002376:	f000 8097 	beq.w	80024a8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800237a:	2300      	movs	r3, #0
 800237c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800237e:	4b81      	ldr	r3, [pc, #516]	; (8002584 <HAL_RCC_OscConfig+0x470>)
 8002380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002382:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d10f      	bne.n	80023aa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800238a:	2300      	movs	r3, #0
 800238c:	60bb      	str	r3, [r7, #8]
 800238e:	4b7d      	ldr	r3, [pc, #500]	; (8002584 <HAL_RCC_OscConfig+0x470>)
 8002390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002392:	4a7c      	ldr	r2, [pc, #496]	; (8002584 <HAL_RCC_OscConfig+0x470>)
 8002394:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002398:	6413      	str	r3, [r2, #64]	; 0x40
 800239a:	4b7a      	ldr	r3, [pc, #488]	; (8002584 <HAL_RCC_OscConfig+0x470>)
 800239c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023a2:	60bb      	str	r3, [r7, #8]
 80023a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023a6:	2301      	movs	r3, #1
 80023a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023aa:	4b77      	ldr	r3, [pc, #476]	; (8002588 <HAL_RCC_OscConfig+0x474>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d118      	bne.n	80023e8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023b6:	4b74      	ldr	r3, [pc, #464]	; (8002588 <HAL_RCC_OscConfig+0x474>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a73      	ldr	r2, [pc, #460]	; (8002588 <HAL_RCC_OscConfig+0x474>)
 80023bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023c2:	f7fe fc29 	bl	8000c18 <HAL_GetTick>
 80023c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023c8:	e008      	b.n	80023dc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023ca:	f7fe fc25 	bl	8000c18 <HAL_GetTick>
 80023ce:	4602      	mov	r2, r0
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	d901      	bls.n	80023dc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80023d8:	2303      	movs	r3, #3
 80023da:	e10c      	b.n	80025f6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023dc:	4b6a      	ldr	r3, [pc, #424]	; (8002588 <HAL_RCC_OscConfig+0x474>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d0f0      	beq.n	80023ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d106      	bne.n	80023fe <HAL_RCC_OscConfig+0x2ea>
 80023f0:	4b64      	ldr	r3, [pc, #400]	; (8002584 <HAL_RCC_OscConfig+0x470>)
 80023f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023f4:	4a63      	ldr	r2, [pc, #396]	; (8002584 <HAL_RCC_OscConfig+0x470>)
 80023f6:	f043 0301 	orr.w	r3, r3, #1
 80023fa:	6713      	str	r3, [r2, #112]	; 0x70
 80023fc:	e01c      	b.n	8002438 <HAL_RCC_OscConfig+0x324>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	2b05      	cmp	r3, #5
 8002404:	d10c      	bne.n	8002420 <HAL_RCC_OscConfig+0x30c>
 8002406:	4b5f      	ldr	r3, [pc, #380]	; (8002584 <HAL_RCC_OscConfig+0x470>)
 8002408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800240a:	4a5e      	ldr	r2, [pc, #376]	; (8002584 <HAL_RCC_OscConfig+0x470>)
 800240c:	f043 0304 	orr.w	r3, r3, #4
 8002410:	6713      	str	r3, [r2, #112]	; 0x70
 8002412:	4b5c      	ldr	r3, [pc, #368]	; (8002584 <HAL_RCC_OscConfig+0x470>)
 8002414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002416:	4a5b      	ldr	r2, [pc, #364]	; (8002584 <HAL_RCC_OscConfig+0x470>)
 8002418:	f043 0301 	orr.w	r3, r3, #1
 800241c:	6713      	str	r3, [r2, #112]	; 0x70
 800241e:	e00b      	b.n	8002438 <HAL_RCC_OscConfig+0x324>
 8002420:	4b58      	ldr	r3, [pc, #352]	; (8002584 <HAL_RCC_OscConfig+0x470>)
 8002422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002424:	4a57      	ldr	r2, [pc, #348]	; (8002584 <HAL_RCC_OscConfig+0x470>)
 8002426:	f023 0301 	bic.w	r3, r3, #1
 800242a:	6713      	str	r3, [r2, #112]	; 0x70
 800242c:	4b55      	ldr	r3, [pc, #340]	; (8002584 <HAL_RCC_OscConfig+0x470>)
 800242e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002430:	4a54      	ldr	r2, [pc, #336]	; (8002584 <HAL_RCC_OscConfig+0x470>)
 8002432:	f023 0304 	bic.w	r3, r3, #4
 8002436:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d015      	beq.n	800246c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002440:	f7fe fbea 	bl	8000c18 <HAL_GetTick>
 8002444:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002446:	e00a      	b.n	800245e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002448:	f7fe fbe6 	bl	8000c18 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	f241 3288 	movw	r2, #5000	; 0x1388
 8002456:	4293      	cmp	r3, r2
 8002458:	d901      	bls.n	800245e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e0cb      	b.n	80025f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800245e:	4b49      	ldr	r3, [pc, #292]	; (8002584 <HAL_RCC_OscConfig+0x470>)
 8002460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002462:	f003 0302 	and.w	r3, r3, #2
 8002466:	2b00      	cmp	r3, #0
 8002468:	d0ee      	beq.n	8002448 <HAL_RCC_OscConfig+0x334>
 800246a:	e014      	b.n	8002496 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800246c:	f7fe fbd4 	bl	8000c18 <HAL_GetTick>
 8002470:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002472:	e00a      	b.n	800248a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002474:	f7fe fbd0 	bl	8000c18 <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002482:	4293      	cmp	r3, r2
 8002484:	d901      	bls.n	800248a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e0b5      	b.n	80025f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800248a:	4b3e      	ldr	r3, [pc, #248]	; (8002584 <HAL_RCC_OscConfig+0x470>)
 800248c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800248e:	f003 0302 	and.w	r3, r3, #2
 8002492:	2b00      	cmp	r3, #0
 8002494:	d1ee      	bne.n	8002474 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002496:	7dfb      	ldrb	r3, [r7, #23]
 8002498:	2b01      	cmp	r3, #1
 800249a:	d105      	bne.n	80024a8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800249c:	4b39      	ldr	r3, [pc, #228]	; (8002584 <HAL_RCC_OscConfig+0x470>)
 800249e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a0:	4a38      	ldr	r2, [pc, #224]	; (8002584 <HAL_RCC_OscConfig+0x470>)
 80024a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024a6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	699b      	ldr	r3, [r3, #24]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	f000 80a1 	beq.w	80025f4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024b2:	4b34      	ldr	r3, [pc, #208]	; (8002584 <HAL_RCC_OscConfig+0x470>)
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	f003 030c 	and.w	r3, r3, #12
 80024ba:	2b08      	cmp	r3, #8
 80024bc:	d05c      	beq.n	8002578 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	699b      	ldr	r3, [r3, #24]
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d141      	bne.n	800254a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024c6:	4b31      	ldr	r3, [pc, #196]	; (800258c <HAL_RCC_OscConfig+0x478>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024cc:	f7fe fba4 	bl	8000c18 <HAL_GetTick>
 80024d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024d2:	e008      	b.n	80024e6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024d4:	f7fe fba0 	bl	8000c18 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e087      	b.n	80025f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024e6:	4b27      	ldr	r3, [pc, #156]	; (8002584 <HAL_RCC_OscConfig+0x470>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d1f0      	bne.n	80024d4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	69da      	ldr	r2, [r3, #28]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6a1b      	ldr	r3, [r3, #32]
 80024fa:	431a      	orrs	r2, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002500:	019b      	lsls	r3, r3, #6
 8002502:	431a      	orrs	r2, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002508:	085b      	lsrs	r3, r3, #1
 800250a:	3b01      	subs	r3, #1
 800250c:	041b      	lsls	r3, r3, #16
 800250e:	431a      	orrs	r2, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002514:	061b      	lsls	r3, r3, #24
 8002516:	491b      	ldr	r1, [pc, #108]	; (8002584 <HAL_RCC_OscConfig+0x470>)
 8002518:	4313      	orrs	r3, r2
 800251a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800251c:	4b1b      	ldr	r3, [pc, #108]	; (800258c <HAL_RCC_OscConfig+0x478>)
 800251e:	2201      	movs	r2, #1
 8002520:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002522:	f7fe fb79 	bl	8000c18 <HAL_GetTick>
 8002526:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002528:	e008      	b.n	800253c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800252a:	f7fe fb75 	bl	8000c18 <HAL_GetTick>
 800252e:	4602      	mov	r2, r0
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	2b02      	cmp	r3, #2
 8002536:	d901      	bls.n	800253c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e05c      	b.n	80025f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800253c:	4b11      	ldr	r3, [pc, #68]	; (8002584 <HAL_RCC_OscConfig+0x470>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d0f0      	beq.n	800252a <HAL_RCC_OscConfig+0x416>
 8002548:	e054      	b.n	80025f4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800254a:	4b10      	ldr	r3, [pc, #64]	; (800258c <HAL_RCC_OscConfig+0x478>)
 800254c:	2200      	movs	r2, #0
 800254e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002550:	f7fe fb62 	bl	8000c18 <HAL_GetTick>
 8002554:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002556:	e008      	b.n	800256a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002558:	f7fe fb5e 	bl	8000c18 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b02      	cmp	r3, #2
 8002564:	d901      	bls.n	800256a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e045      	b.n	80025f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800256a:	4b06      	ldr	r3, [pc, #24]	; (8002584 <HAL_RCC_OscConfig+0x470>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d1f0      	bne.n	8002558 <HAL_RCC_OscConfig+0x444>
 8002576:	e03d      	b.n	80025f4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	699b      	ldr	r3, [r3, #24]
 800257c:	2b01      	cmp	r3, #1
 800257e:	d107      	bne.n	8002590 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e038      	b.n	80025f6 <HAL_RCC_OscConfig+0x4e2>
 8002584:	40023800 	.word	0x40023800
 8002588:	40007000 	.word	0x40007000
 800258c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002590:	4b1b      	ldr	r3, [pc, #108]	; (8002600 <HAL_RCC_OscConfig+0x4ec>)
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	699b      	ldr	r3, [r3, #24]
 800259a:	2b01      	cmp	r3, #1
 800259c:	d028      	beq.n	80025f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d121      	bne.n	80025f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d11a      	bne.n	80025f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025ba:	68fa      	ldr	r2, [r7, #12]
 80025bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80025c0:	4013      	ands	r3, r2
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80025c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d111      	bne.n	80025f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d6:	085b      	lsrs	r3, r3, #1
 80025d8:	3b01      	subs	r3, #1
 80025da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025dc:	429a      	cmp	r2, r3
 80025de:	d107      	bne.n	80025f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d001      	beq.n	80025f4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e000      	b.n	80025f6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3718      	adds	r7, #24
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	40023800 	.word	0x40023800

08002604 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d101      	bne.n	8002618 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e0cc      	b.n	80027b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002618:	4b68      	ldr	r3, [pc, #416]	; (80027bc <HAL_RCC_ClockConfig+0x1b8>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0307 	and.w	r3, r3, #7
 8002620:	683a      	ldr	r2, [r7, #0]
 8002622:	429a      	cmp	r2, r3
 8002624:	d90c      	bls.n	8002640 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002626:	4b65      	ldr	r3, [pc, #404]	; (80027bc <HAL_RCC_ClockConfig+0x1b8>)
 8002628:	683a      	ldr	r2, [r7, #0]
 800262a:	b2d2      	uxtb	r2, r2
 800262c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800262e:	4b63      	ldr	r3, [pc, #396]	; (80027bc <HAL_RCC_ClockConfig+0x1b8>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0307 	and.w	r3, r3, #7
 8002636:	683a      	ldr	r2, [r7, #0]
 8002638:	429a      	cmp	r2, r3
 800263a:	d001      	beq.n	8002640 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e0b8      	b.n	80027b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0302 	and.w	r3, r3, #2
 8002648:	2b00      	cmp	r3, #0
 800264a:	d020      	beq.n	800268e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0304 	and.w	r3, r3, #4
 8002654:	2b00      	cmp	r3, #0
 8002656:	d005      	beq.n	8002664 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002658:	4b59      	ldr	r3, [pc, #356]	; (80027c0 <HAL_RCC_ClockConfig+0x1bc>)
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	4a58      	ldr	r2, [pc, #352]	; (80027c0 <HAL_RCC_ClockConfig+0x1bc>)
 800265e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002662:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0308 	and.w	r3, r3, #8
 800266c:	2b00      	cmp	r3, #0
 800266e:	d005      	beq.n	800267c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002670:	4b53      	ldr	r3, [pc, #332]	; (80027c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	4a52      	ldr	r2, [pc, #328]	; (80027c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002676:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800267a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800267c:	4b50      	ldr	r3, [pc, #320]	; (80027c0 <HAL_RCC_ClockConfig+0x1bc>)
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	494d      	ldr	r1, [pc, #308]	; (80027c0 <HAL_RCC_ClockConfig+0x1bc>)
 800268a:	4313      	orrs	r3, r2
 800268c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0301 	and.w	r3, r3, #1
 8002696:	2b00      	cmp	r3, #0
 8002698:	d044      	beq.n	8002724 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d107      	bne.n	80026b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026a2:	4b47      	ldr	r3, [pc, #284]	; (80027c0 <HAL_RCC_ClockConfig+0x1bc>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d119      	bne.n	80026e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e07f      	b.n	80027b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d003      	beq.n	80026c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026be:	2b03      	cmp	r3, #3
 80026c0:	d107      	bne.n	80026d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026c2:	4b3f      	ldr	r3, [pc, #252]	; (80027c0 <HAL_RCC_ClockConfig+0x1bc>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d109      	bne.n	80026e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e06f      	b.n	80027b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026d2:	4b3b      	ldr	r3, [pc, #236]	; (80027c0 <HAL_RCC_ClockConfig+0x1bc>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0302 	and.w	r3, r3, #2
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d101      	bne.n	80026e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e067      	b.n	80027b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026e2:	4b37      	ldr	r3, [pc, #220]	; (80027c0 <HAL_RCC_ClockConfig+0x1bc>)
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	f023 0203 	bic.w	r2, r3, #3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	4934      	ldr	r1, [pc, #208]	; (80027c0 <HAL_RCC_ClockConfig+0x1bc>)
 80026f0:	4313      	orrs	r3, r2
 80026f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026f4:	f7fe fa90 	bl	8000c18 <HAL_GetTick>
 80026f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026fa:	e00a      	b.n	8002712 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026fc:	f7fe fa8c 	bl	8000c18 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	f241 3288 	movw	r2, #5000	; 0x1388
 800270a:	4293      	cmp	r3, r2
 800270c:	d901      	bls.n	8002712 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e04f      	b.n	80027b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002712:	4b2b      	ldr	r3, [pc, #172]	; (80027c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f003 020c 	and.w	r2, r3, #12
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	429a      	cmp	r2, r3
 8002722:	d1eb      	bne.n	80026fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002724:	4b25      	ldr	r3, [pc, #148]	; (80027bc <HAL_RCC_ClockConfig+0x1b8>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0307 	and.w	r3, r3, #7
 800272c:	683a      	ldr	r2, [r7, #0]
 800272e:	429a      	cmp	r2, r3
 8002730:	d20c      	bcs.n	800274c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002732:	4b22      	ldr	r3, [pc, #136]	; (80027bc <HAL_RCC_ClockConfig+0x1b8>)
 8002734:	683a      	ldr	r2, [r7, #0]
 8002736:	b2d2      	uxtb	r2, r2
 8002738:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800273a:	4b20      	ldr	r3, [pc, #128]	; (80027bc <HAL_RCC_ClockConfig+0x1b8>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0307 	and.w	r3, r3, #7
 8002742:	683a      	ldr	r2, [r7, #0]
 8002744:	429a      	cmp	r2, r3
 8002746:	d001      	beq.n	800274c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e032      	b.n	80027b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0304 	and.w	r3, r3, #4
 8002754:	2b00      	cmp	r3, #0
 8002756:	d008      	beq.n	800276a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002758:	4b19      	ldr	r3, [pc, #100]	; (80027c0 <HAL_RCC_ClockConfig+0x1bc>)
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	4916      	ldr	r1, [pc, #88]	; (80027c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002766:	4313      	orrs	r3, r2
 8002768:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0308 	and.w	r3, r3, #8
 8002772:	2b00      	cmp	r3, #0
 8002774:	d009      	beq.n	800278a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002776:	4b12      	ldr	r3, [pc, #72]	; (80027c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	691b      	ldr	r3, [r3, #16]
 8002782:	00db      	lsls	r3, r3, #3
 8002784:	490e      	ldr	r1, [pc, #56]	; (80027c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002786:	4313      	orrs	r3, r2
 8002788:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800278a:	f000 f821 	bl	80027d0 <HAL_RCC_GetSysClockFreq>
 800278e:	4602      	mov	r2, r0
 8002790:	4b0b      	ldr	r3, [pc, #44]	; (80027c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	091b      	lsrs	r3, r3, #4
 8002796:	f003 030f 	and.w	r3, r3, #15
 800279a:	490a      	ldr	r1, [pc, #40]	; (80027c4 <HAL_RCC_ClockConfig+0x1c0>)
 800279c:	5ccb      	ldrb	r3, [r1, r3]
 800279e:	fa22 f303 	lsr.w	r3, r2, r3
 80027a2:	4a09      	ldr	r2, [pc, #36]	; (80027c8 <HAL_RCC_ClockConfig+0x1c4>)
 80027a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80027a6:	4b09      	ldr	r3, [pc, #36]	; (80027cc <HAL_RCC_ClockConfig+0x1c8>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7fe f9f0 	bl	8000b90 <HAL_InitTick>

  return HAL_OK;
 80027b0:	2300      	movs	r3, #0
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3710      	adds	r7, #16
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	40023c00 	.word	0x40023c00
 80027c0:	40023800 	.word	0x40023800
 80027c4:	08002b60 	.word	0x08002b60
 80027c8:	20000000 	.word	0x20000000
 80027cc:	20000004 	.word	0x20000004

080027d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027d4:	b094      	sub	sp, #80	; 0x50
 80027d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80027d8:	2300      	movs	r3, #0
 80027da:	647b      	str	r3, [r7, #68]	; 0x44
 80027dc:	2300      	movs	r3, #0
 80027de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027e0:	2300      	movs	r3, #0
 80027e2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80027e4:	2300      	movs	r3, #0
 80027e6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027e8:	4b79      	ldr	r3, [pc, #484]	; (80029d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	f003 030c 	and.w	r3, r3, #12
 80027f0:	2b08      	cmp	r3, #8
 80027f2:	d00d      	beq.n	8002810 <HAL_RCC_GetSysClockFreq+0x40>
 80027f4:	2b08      	cmp	r3, #8
 80027f6:	f200 80e1 	bhi.w	80029bc <HAL_RCC_GetSysClockFreq+0x1ec>
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d002      	beq.n	8002804 <HAL_RCC_GetSysClockFreq+0x34>
 80027fe:	2b04      	cmp	r3, #4
 8002800:	d003      	beq.n	800280a <HAL_RCC_GetSysClockFreq+0x3a>
 8002802:	e0db      	b.n	80029bc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002804:	4b73      	ldr	r3, [pc, #460]	; (80029d4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002806:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002808:	e0db      	b.n	80029c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800280a:	4b73      	ldr	r3, [pc, #460]	; (80029d8 <HAL_RCC_GetSysClockFreq+0x208>)
 800280c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800280e:	e0d8      	b.n	80029c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002810:	4b6f      	ldr	r3, [pc, #444]	; (80029d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002818:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800281a:	4b6d      	ldr	r3, [pc, #436]	; (80029d0 <HAL_RCC_GetSysClockFreq+0x200>)
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d063      	beq.n	80028ee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002826:	4b6a      	ldr	r3, [pc, #424]	; (80029d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	099b      	lsrs	r3, r3, #6
 800282c:	2200      	movs	r2, #0
 800282e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002830:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002834:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002838:	633b      	str	r3, [r7, #48]	; 0x30
 800283a:	2300      	movs	r3, #0
 800283c:	637b      	str	r3, [r7, #52]	; 0x34
 800283e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002842:	4622      	mov	r2, r4
 8002844:	462b      	mov	r3, r5
 8002846:	f04f 0000 	mov.w	r0, #0
 800284a:	f04f 0100 	mov.w	r1, #0
 800284e:	0159      	lsls	r1, r3, #5
 8002850:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002854:	0150      	lsls	r0, r2, #5
 8002856:	4602      	mov	r2, r0
 8002858:	460b      	mov	r3, r1
 800285a:	4621      	mov	r1, r4
 800285c:	1a51      	subs	r1, r2, r1
 800285e:	6139      	str	r1, [r7, #16]
 8002860:	4629      	mov	r1, r5
 8002862:	eb63 0301 	sbc.w	r3, r3, r1
 8002866:	617b      	str	r3, [r7, #20]
 8002868:	f04f 0200 	mov.w	r2, #0
 800286c:	f04f 0300 	mov.w	r3, #0
 8002870:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002874:	4659      	mov	r1, fp
 8002876:	018b      	lsls	r3, r1, #6
 8002878:	4651      	mov	r1, sl
 800287a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800287e:	4651      	mov	r1, sl
 8002880:	018a      	lsls	r2, r1, #6
 8002882:	4651      	mov	r1, sl
 8002884:	ebb2 0801 	subs.w	r8, r2, r1
 8002888:	4659      	mov	r1, fp
 800288a:	eb63 0901 	sbc.w	r9, r3, r1
 800288e:	f04f 0200 	mov.w	r2, #0
 8002892:	f04f 0300 	mov.w	r3, #0
 8002896:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800289a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800289e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80028a2:	4690      	mov	r8, r2
 80028a4:	4699      	mov	r9, r3
 80028a6:	4623      	mov	r3, r4
 80028a8:	eb18 0303 	adds.w	r3, r8, r3
 80028ac:	60bb      	str	r3, [r7, #8]
 80028ae:	462b      	mov	r3, r5
 80028b0:	eb49 0303 	adc.w	r3, r9, r3
 80028b4:	60fb      	str	r3, [r7, #12]
 80028b6:	f04f 0200 	mov.w	r2, #0
 80028ba:	f04f 0300 	mov.w	r3, #0
 80028be:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80028c2:	4629      	mov	r1, r5
 80028c4:	024b      	lsls	r3, r1, #9
 80028c6:	4621      	mov	r1, r4
 80028c8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80028cc:	4621      	mov	r1, r4
 80028ce:	024a      	lsls	r2, r1, #9
 80028d0:	4610      	mov	r0, r2
 80028d2:	4619      	mov	r1, r3
 80028d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028d6:	2200      	movs	r2, #0
 80028d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80028da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80028dc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80028e0:	f7fd fc72 	bl	80001c8 <__aeabi_uldivmod>
 80028e4:	4602      	mov	r2, r0
 80028e6:	460b      	mov	r3, r1
 80028e8:	4613      	mov	r3, r2
 80028ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80028ec:	e058      	b.n	80029a0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028ee:	4b38      	ldr	r3, [pc, #224]	; (80029d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	099b      	lsrs	r3, r3, #6
 80028f4:	2200      	movs	r2, #0
 80028f6:	4618      	mov	r0, r3
 80028f8:	4611      	mov	r1, r2
 80028fa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80028fe:	623b      	str	r3, [r7, #32]
 8002900:	2300      	movs	r3, #0
 8002902:	627b      	str	r3, [r7, #36]	; 0x24
 8002904:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002908:	4642      	mov	r2, r8
 800290a:	464b      	mov	r3, r9
 800290c:	f04f 0000 	mov.w	r0, #0
 8002910:	f04f 0100 	mov.w	r1, #0
 8002914:	0159      	lsls	r1, r3, #5
 8002916:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800291a:	0150      	lsls	r0, r2, #5
 800291c:	4602      	mov	r2, r0
 800291e:	460b      	mov	r3, r1
 8002920:	4641      	mov	r1, r8
 8002922:	ebb2 0a01 	subs.w	sl, r2, r1
 8002926:	4649      	mov	r1, r9
 8002928:	eb63 0b01 	sbc.w	fp, r3, r1
 800292c:	f04f 0200 	mov.w	r2, #0
 8002930:	f04f 0300 	mov.w	r3, #0
 8002934:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002938:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800293c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002940:	ebb2 040a 	subs.w	r4, r2, sl
 8002944:	eb63 050b 	sbc.w	r5, r3, fp
 8002948:	f04f 0200 	mov.w	r2, #0
 800294c:	f04f 0300 	mov.w	r3, #0
 8002950:	00eb      	lsls	r3, r5, #3
 8002952:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002956:	00e2      	lsls	r2, r4, #3
 8002958:	4614      	mov	r4, r2
 800295a:	461d      	mov	r5, r3
 800295c:	4643      	mov	r3, r8
 800295e:	18e3      	adds	r3, r4, r3
 8002960:	603b      	str	r3, [r7, #0]
 8002962:	464b      	mov	r3, r9
 8002964:	eb45 0303 	adc.w	r3, r5, r3
 8002968:	607b      	str	r3, [r7, #4]
 800296a:	f04f 0200 	mov.w	r2, #0
 800296e:	f04f 0300 	mov.w	r3, #0
 8002972:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002976:	4629      	mov	r1, r5
 8002978:	028b      	lsls	r3, r1, #10
 800297a:	4621      	mov	r1, r4
 800297c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002980:	4621      	mov	r1, r4
 8002982:	028a      	lsls	r2, r1, #10
 8002984:	4610      	mov	r0, r2
 8002986:	4619      	mov	r1, r3
 8002988:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800298a:	2200      	movs	r2, #0
 800298c:	61bb      	str	r3, [r7, #24]
 800298e:	61fa      	str	r2, [r7, #28]
 8002990:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002994:	f7fd fc18 	bl	80001c8 <__aeabi_uldivmod>
 8002998:	4602      	mov	r2, r0
 800299a:	460b      	mov	r3, r1
 800299c:	4613      	mov	r3, r2
 800299e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80029a0:	4b0b      	ldr	r3, [pc, #44]	; (80029d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	0c1b      	lsrs	r3, r3, #16
 80029a6:	f003 0303 	and.w	r3, r3, #3
 80029aa:	3301      	adds	r3, #1
 80029ac:	005b      	lsls	r3, r3, #1
 80029ae:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80029b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80029b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029b8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80029ba:	e002      	b.n	80029c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029bc:	4b05      	ldr	r3, [pc, #20]	; (80029d4 <HAL_RCC_GetSysClockFreq+0x204>)
 80029be:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80029c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3750      	adds	r7, #80	; 0x50
 80029c8:	46bd      	mov	sp, r7
 80029ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029ce:	bf00      	nop
 80029d0:	40023800 	.word	0x40023800
 80029d4:	00f42400 	.word	0x00f42400
 80029d8:	007a1200 	.word	0x007a1200

080029dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d101      	bne.n	80029ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e07b      	b.n	8002ae6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d108      	bne.n	8002a08 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029fe:	d009      	beq.n	8002a14 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	61da      	str	r2, [r3, #28]
 8002a06:	e005      	b.n	8002a14 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d106      	bne.n	8002a34 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f7fd ffd4 	bl	80009dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2202      	movs	r2, #2
 8002a38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a4a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002a5c:	431a      	orrs	r2, r3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a66:	431a      	orrs	r2, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	691b      	ldr	r3, [r3, #16]
 8002a6c:	f003 0302 	and.w	r3, r3, #2
 8002a70:	431a      	orrs	r2, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	695b      	ldr	r3, [r3, #20]
 8002a76:	f003 0301 	and.w	r3, r3, #1
 8002a7a:	431a      	orrs	r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	699b      	ldr	r3, [r3, #24]
 8002a80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a84:	431a      	orrs	r2, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	69db      	ldr	r3, [r3, #28]
 8002a8a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a8e:	431a      	orrs	r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6a1b      	ldr	r3, [r3, #32]
 8002a94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a98:	ea42 0103 	orr.w	r1, r2, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	430a      	orrs	r2, r1
 8002aaa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	699b      	ldr	r3, [r3, #24]
 8002ab0:	0c1b      	lsrs	r3, r3, #16
 8002ab2:	f003 0104 	and.w	r1, r3, #4
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aba:	f003 0210 	and.w	r2, r3, #16
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	430a      	orrs	r2, r1
 8002ac4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	69da      	ldr	r2, [r3, #28]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ad4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3708      	adds	r7, #8
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}

08002aee <memset>:
 8002aee:	4402      	add	r2, r0
 8002af0:	4603      	mov	r3, r0
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d100      	bne.n	8002af8 <memset+0xa>
 8002af6:	4770      	bx	lr
 8002af8:	f803 1b01 	strb.w	r1, [r3], #1
 8002afc:	e7f9      	b.n	8002af2 <memset+0x4>
	...

08002b00 <__libc_init_array>:
 8002b00:	b570      	push	{r4, r5, r6, lr}
 8002b02:	4d0d      	ldr	r5, [pc, #52]	; (8002b38 <__libc_init_array+0x38>)
 8002b04:	4c0d      	ldr	r4, [pc, #52]	; (8002b3c <__libc_init_array+0x3c>)
 8002b06:	1b64      	subs	r4, r4, r5
 8002b08:	10a4      	asrs	r4, r4, #2
 8002b0a:	2600      	movs	r6, #0
 8002b0c:	42a6      	cmp	r6, r4
 8002b0e:	d109      	bne.n	8002b24 <__libc_init_array+0x24>
 8002b10:	4d0b      	ldr	r5, [pc, #44]	; (8002b40 <__libc_init_array+0x40>)
 8002b12:	4c0c      	ldr	r4, [pc, #48]	; (8002b44 <__libc_init_array+0x44>)
 8002b14:	f000 f818 	bl	8002b48 <_init>
 8002b18:	1b64      	subs	r4, r4, r5
 8002b1a:	10a4      	asrs	r4, r4, #2
 8002b1c:	2600      	movs	r6, #0
 8002b1e:	42a6      	cmp	r6, r4
 8002b20:	d105      	bne.n	8002b2e <__libc_init_array+0x2e>
 8002b22:	bd70      	pop	{r4, r5, r6, pc}
 8002b24:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b28:	4798      	blx	r3
 8002b2a:	3601      	adds	r6, #1
 8002b2c:	e7ee      	b.n	8002b0c <__libc_init_array+0xc>
 8002b2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b32:	4798      	blx	r3
 8002b34:	3601      	adds	r6, #1
 8002b36:	e7f2      	b.n	8002b1e <__libc_init_array+0x1e>
 8002b38:	08002b80 	.word	0x08002b80
 8002b3c:	08002b80 	.word	0x08002b80
 8002b40:	08002b80 	.word	0x08002b80
 8002b44:	08002b84 	.word	0x08002b84

08002b48 <_init>:
 8002b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b4a:	bf00      	nop
 8002b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b4e:	bc08      	pop	{r3}
 8002b50:	469e      	mov	lr, r3
 8002b52:	4770      	bx	lr

08002b54 <_fini>:
 8002b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b56:	bf00      	nop
 8002b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b5a:	bc08      	pop	{r3}
 8002b5c:	469e      	mov	lr, r3
 8002b5e:	4770      	bx	lr
